Definitions:
	(define (f x)
		x
		(if (eq? x 0)
			(f (+ x 1))
			(rec (+ x 1))
		)
	)
	(define (rec y)
		(while (> y 0)
			(rec (f y))
		)
	)
Executions:
	0
	(rec (+ 1 0))
	(f #t)
	(rec #f)