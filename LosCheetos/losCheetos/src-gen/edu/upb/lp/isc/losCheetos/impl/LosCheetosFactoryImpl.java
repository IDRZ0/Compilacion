/**
 * generated by Xtext 2.11.0
 */
package edu.upb.lp.isc.losCheetos.impl;

import edu.upb.lp.isc.losCheetos.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class LosCheetosFactoryImpl extends EFactoryImpl implements LosCheetosFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static LosCheetosFactory init()
  {
    try
    {
      LosCheetosFactory theLosCheetosFactory = (LosCheetosFactory)EPackage.Registry.INSTANCE.getEFactory(LosCheetosPackage.eNS_URI);
      if (theLosCheetosFactory != null)
      {
        return theLosCheetosFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new LosCheetosFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LosCheetosFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case LosCheetosPackage.MY_RACKET_PROGRAM: return createMyRacketProgram();
      case LosCheetosPackage.DEFINE: return createDefine();
      case LosCheetosPackage.EXPRESSION: return createExpression();
      case LosCheetosPackage.SIMPLE_EXPRESSION: return createSimpleExpression();
      case LosCheetosPackage.NUMBER_EXPRESSION: return createNumberExpression();
      case LosCheetosPackage.INT_EXPRESSION: return createIntExpression();
      case LosCheetosPackage.DOUBLE_EXPRESSION: return createDoubleExpression();
      case LosCheetosPackage.FRAC_EXPRESSION: return createFracExpression();
      case LosCheetosPackage.COMP_EXPRESSION: return createCompExpression();
      case LosCheetosPackage.BOOL_EXPRESSION: return createBoolExpression();
      case LosCheetosPackage.BOOL_CONSTANT: return createBoolConstant();
      case LosCheetosPackage.BOOL_NUM_COMP_EXPRESSION: return createBoolNumCompExpression();
      case LosCheetosPackage.BOOL_COMP_EXPRESSION: return createBoolCompExpression();
      case LosCheetosPackage.STR_EXPRESSION: return createStrExpression();
      case LosCheetosPackage.LIST_EXPRESSION: return createListExpression();
      case LosCheetosPackage.PRINT_EXPRESSION: return createPrintExpression();
      case LosCheetosPackage.LIST_OP_EXPRESSION: return createListOpExpression();
      case LosCheetosPackage.CAR_EXPRESSION: return createCarExpression();
      case LosCheetosPackage.CDR_EXPRESSION: return createCdrExpression();
      case LosCheetosPackage.LENGTH_EXPRESSION: return createLengthExpression();
      case LosCheetosPackage.EMPTY_EXPRESSION: return createEmptyExpression();
      case LosCheetosPackage.CONS_EXPRESSION: return createConsExpression();
      case LosCheetosPackage.STR_OP_EXPRESSION: return createStrOpExpression();
      case LosCheetosPackage.STR_LEN_EXPRESSION: return createStrLenExpression();
      case LosCheetosPackage.STR_APP_EXPRESSION: return createStrAppExpression();
      case LosCheetosPackage.PARAM_CALL_EXPRESSION: return createParamCallExpression();
      case LosCheetosPackage.ARITH_EXPRESSION: return createArithExpression();
      case LosCheetosPackage.IF_EXPRESSION: return createIfExpression();
      case LosCheetosPackage.FUNCTION_CALL_EXPRESSION: return createFunctionCallExpression();
      case LosCheetosPackage.WHILE_EXPRESSION: return createWhileExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MyRacketProgram createMyRacketProgram()
  {
    MyRacketProgramImpl myRacketProgram = new MyRacketProgramImpl();
    return myRacketProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Define createDefine()
  {
    DefineImpl define = new DefineImpl();
    return define;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleExpression createSimpleExpression()
  {
    SimpleExpressionImpl simpleExpression = new SimpleExpressionImpl();
    return simpleExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberExpression createNumberExpression()
  {
    NumberExpressionImpl numberExpression = new NumberExpressionImpl();
    return numberExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntExpression createIntExpression()
  {
    IntExpressionImpl intExpression = new IntExpressionImpl();
    return intExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoubleExpression createDoubleExpression()
  {
    DoubleExpressionImpl doubleExpression = new DoubleExpressionImpl();
    return doubleExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FracExpression createFracExpression()
  {
    FracExpressionImpl fracExpression = new FracExpressionImpl();
    return fracExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompExpression createCompExpression()
  {
    CompExpressionImpl compExpression = new CompExpressionImpl();
    return compExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoolExpression createBoolExpression()
  {
    BoolExpressionImpl boolExpression = new BoolExpressionImpl();
    return boolExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoolConstant createBoolConstant()
  {
    BoolConstantImpl boolConstant = new BoolConstantImpl();
    return boolConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoolNumCompExpression createBoolNumCompExpression()
  {
    BoolNumCompExpressionImpl boolNumCompExpression = new BoolNumCompExpressionImpl();
    return boolNumCompExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoolCompExpression createBoolCompExpression()
  {
    BoolCompExpressionImpl boolCompExpression = new BoolCompExpressionImpl();
    return boolCompExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StrExpression createStrExpression()
  {
    StrExpressionImpl strExpression = new StrExpressionImpl();
    return strExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListExpression createListExpression()
  {
    ListExpressionImpl listExpression = new ListExpressionImpl();
    return listExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrintExpression createPrintExpression()
  {
    PrintExpressionImpl printExpression = new PrintExpressionImpl();
    return printExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListOpExpression createListOpExpression()
  {
    ListOpExpressionImpl listOpExpression = new ListOpExpressionImpl();
    return listOpExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CarExpression createCarExpression()
  {
    CarExpressionImpl carExpression = new CarExpressionImpl();
    return carExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CdrExpression createCdrExpression()
  {
    CdrExpressionImpl cdrExpression = new CdrExpressionImpl();
    return cdrExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LengthExpression createLengthExpression()
  {
    LengthExpressionImpl lengthExpression = new LengthExpressionImpl();
    return lengthExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EmptyExpression createEmptyExpression()
  {
    EmptyExpressionImpl emptyExpression = new EmptyExpressionImpl();
    return emptyExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConsExpression createConsExpression()
  {
    ConsExpressionImpl consExpression = new ConsExpressionImpl();
    return consExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StrOpExpression createStrOpExpression()
  {
    StrOpExpressionImpl strOpExpression = new StrOpExpressionImpl();
    return strOpExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StrLenExpression createStrLenExpression()
  {
    StrLenExpressionImpl strLenExpression = new StrLenExpressionImpl();
    return strLenExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StrAppExpression createStrAppExpression()
  {
    StrAppExpressionImpl strAppExpression = new StrAppExpressionImpl();
    return strAppExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParamCallExpression createParamCallExpression()
  {
    ParamCallExpressionImpl paramCallExpression = new ParamCallExpressionImpl();
    return paramCallExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithExpression createArithExpression()
  {
    ArithExpressionImpl arithExpression = new ArithExpressionImpl();
    return arithExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfExpression createIfExpression()
  {
    IfExpressionImpl ifExpression = new IfExpressionImpl();
    return ifExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionCallExpression createFunctionCallExpression()
  {
    FunctionCallExpressionImpl functionCallExpression = new FunctionCallExpressionImpl();
    return functionCallExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhileExpression createWhileExpression()
  {
    WhileExpressionImpl whileExpression = new WhileExpressionImpl();
    return whileExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LosCheetosPackage getLosCheetosPackage()
  {
    return (LosCheetosPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static LosCheetosPackage getPackage()
  {
    return LosCheetosPackage.eINSTANCE;
  }

} //LosCheetosFactoryImpl
