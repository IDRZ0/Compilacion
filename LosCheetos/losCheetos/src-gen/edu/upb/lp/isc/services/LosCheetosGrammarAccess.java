/*
 * generated by Xtext 2.11.0
 */
package edu.upb.lp.isc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LosCheetosGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MyRacketProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.MyRacketProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cDefinitionsKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDefinesAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDefinesDefineParserRuleCall_0_2_0 = (RuleCall)cDefinesAssignment_0_2.eContents().get(0);
		private final Keyword cExecutionsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExecutionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExecutionsExpressionParserRuleCall_3_0 = (RuleCall)cExecutionsAssignment_3.eContents().get(0);
		
		//MyRacketProgram:
		//	("Definitions" ":"
		//	defines+=Define+)?
		//	"Executions" ":"
		//	executions+=Expression+;
		@Override public ParserRule getRule() { return rule; }
		
		//("Definitions" ":" defines+=Define+)? "Executions" ":" executions+=Expression+
		public Group getGroup() { return cGroup; }
		
		//("Definitions" ":" defines+=Define+)?
		public Group getGroup_0() { return cGroup_0; }
		
		//"Definitions"
		public Keyword getDefinitionsKeyword_0_0() { return cDefinitionsKeyword_0_0; }
		
		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//defines+=Define+
		public Assignment getDefinesAssignment_0_2() { return cDefinesAssignment_0_2; }
		
		//Define
		public RuleCall getDefinesDefineParserRuleCall_0_2_0() { return cDefinesDefineParserRuleCall_0_2_0; }
		
		//"Executions"
		public Keyword getExecutionsKeyword_1() { return cExecutionsKeyword_1; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//executions+=Expression+
		public Assignment getExecutionsAssignment_3() { return cExecutionsAssignment_3; }
		
		//Expression
		public RuleCall getExecutionsExpressionParserRuleCall_3_0() { return cExecutionsExpressionParserRuleCall_3_0; }
	}
	public class DefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.Define");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDefineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cParamsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamsIDTerminalRuleCall_4_0 = (RuleCall)cParamsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Define:
		//	"(" "define" "(" name=ID params+=ID* ")" body+=Expression+ ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "define" "(" name=ID params+=ID* ")" body+=Expression+ ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"define"
		public Keyword getDefineKeyword_1() { return cDefineKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//params+=ID*
		public Assignment getParamsAssignment_4() { return cParamsAssignment_4; }
		
		//ID
		public RuleCall getParamsIDTerminalRuleCall_4_0() { return cParamsIDTerminalRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//body+=Expression+
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//Expression
		public RuleCall getBodyExpressionParserRuleCall_6_0() { return cBodyExpressionParserRuleCall_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionCallExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWhileExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParamCallExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Expression:
		//	SimpleExpression | NumberExpression | IfExpression | FunctionCallExpression | WhileExpression | ParamCallExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleExpression | NumberExpression | IfExpression | FunctionCallExpression | WhileExpression | ParamCallExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_0() { return cSimpleExpressionParserRuleCall_0; }
		
		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_1() { return cNumberExpressionParserRuleCall_1; }
		
		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_2() { return cIfExpressionParserRuleCall_2; }
		
		//FunctionCallExpression
		public RuleCall getFunctionCallExpressionParserRuleCall_3() { return cFunctionCallExpressionParserRuleCall_3; }
		
		//WhileExpression
		public RuleCall getWhileExpressionParserRuleCall_4() { return cWhileExpressionParserRuleCall_4; }
		
		//ParamCallExpression
		public RuleCall getParamCallExpressionParserRuleCall_5() { return cParamCallExpressionParserRuleCall_5; }
	}
	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.SimpleExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStrExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrintExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cListOpExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStrOpExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//SimpleExpression:
		//	BoolExpression | StrExpression | ListExpression | PrintExpression | ListOpExpression | StrOpExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//BoolExpression | StrExpression | ListExpression | PrintExpression | ListOpExpression | StrOpExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BoolExpression
		public RuleCall getBoolExpressionParserRuleCall_0() { return cBoolExpressionParserRuleCall_0; }
		
		//StrExpression
		public RuleCall getStrExpressionParserRuleCall_1() { return cStrExpressionParserRuleCall_1; }
		
		//ListExpression
		public RuleCall getListExpressionParserRuleCall_2() { return cListExpressionParserRuleCall_2; }
		
		//PrintExpression
		public RuleCall getPrintExpressionParserRuleCall_3() { return cPrintExpressionParserRuleCall_3; }
		
		//ListOpExpression
		public RuleCall getListOpExpressionParserRuleCall_4() { return cListOpExpressionParserRuleCall_4; }
		
		//StrOpExpression
		public RuleCall getStrOpExpressionParserRuleCall_5() { return cStrOpExpressionParserRuleCall_5; }
	}
	public class NumberExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.NumberExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoubleExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFracExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCompExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cArithExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//NumberExpression:
		//	IntExpression | DoubleExpression | FracExpression | CompExpression | ArithExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//IntExpression | DoubleExpression | FracExpression | CompExpression | ArithExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntExpression
		public RuleCall getIntExpressionParserRuleCall_0() { return cIntExpressionParserRuleCall_0; }
		
		//DoubleExpression
		public RuleCall getDoubleExpressionParserRuleCall_1() { return cDoubleExpressionParserRuleCall_1; }
		
		//FracExpression
		public RuleCall getFracExpressionParserRuleCall_2() { return cFracExpressionParserRuleCall_2; }
		
		//CompExpression
		public RuleCall getCompExpressionParserRuleCall_3() { return cCompExpressionParserRuleCall_3; }
		
		//ArithExpression
		public RuleCall getArithExpressionParserRuleCall_4() { return cArithExpressionParserRuleCall_4; }
	}
	public class IntExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.IntExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntExpression:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class DoubleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.DoubleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDoubleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIntAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIntINTTerminalRuleCall_3_0 = (RuleCall)cIntAssignment_3.eContents().get(0);
		private final Assignment cDecAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDecINTTerminalRuleCall_4_0 = (RuleCall)cDecAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DoubleExpression:
		//	"(" "double" "(" int=INT dec=INT ")" ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "double" "(" int=INT dec=INT ")" ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"double"
		public Keyword getDoubleKeyword_1() { return cDoubleKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//int=INT
		public Assignment getIntAssignment_3() { return cIntAssignment_3; }
		
		//INT
		public RuleCall getIntINTTerminalRuleCall_3_0() { return cIntINTTerminalRuleCall_3_0; }
		
		//dec=INT
		public Assignment getDecAssignment_4() { return cDecAssignment_4; }
		
		//INT
		public RuleCall getDecINTTerminalRuleCall_4_0() { return cDecINTTerminalRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class FracExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.FracExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFractionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNumAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNumINTTerminalRuleCall_3_0 = (RuleCall)cNumAssignment_3.eContents().get(0);
		private final Assignment cDecAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDecINTTerminalRuleCall_4_0 = (RuleCall)cDecAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FracExpression:
		//	"(" "fraction" "(" num=INT dec=INT ")" ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "fraction" "(" num=INT dec=INT ")" ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"fraction"
		public Keyword getFractionKeyword_1() { return cFractionKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//num=INT
		public Assignment getNumAssignment_3() { return cNumAssignment_3; }
		
		//INT
		public RuleCall getNumINTTerminalRuleCall_3_0() { return cNumINTTerminalRuleCall_3_0; }
		
		//dec=INT
		public Assignment getDecAssignment_4() { return cDecAssignment_4; }
		
		//INT
		public RuleCall getDecINTTerminalRuleCall_4_0() { return cDecINTTerminalRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class CompExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.CompExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cComplexKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRealAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRealINTTerminalRuleCall_3_0 = (RuleCall)cRealAssignment_3.eContents().get(0);
		private final Assignment cImagAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImagINTTerminalRuleCall_4_0 = (RuleCall)cImagAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CompExpression:
		//	"(" "complex" "(" real=INT imag=INT ")" ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "complex" "(" real=INT imag=INT ")" ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"complex"
		public Keyword getComplexKeyword_1() { return cComplexKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//real=INT
		public Assignment getRealAssignment_3() { return cRealAssignment_3; }
		
		//INT
		public RuleCall getRealINTTerminalRuleCall_3_0() { return cRealINTTerminalRuleCall_3_0; }
		
		//imag=INT
		public Assignment getImagAssignment_4() { return cImagAssignment_4; }
		
		//INT
		public RuleCall getImagINTTerminalRuleCall_4_0() { return cImagINTTerminalRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class BoolExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.BoolExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoolNumCompExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolCompExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BoolExpression:
		//	BoolConstant | BoolNumCompExpression | BoolCompExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//BoolConstant | BoolNumCompExpression | BoolCompExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BoolConstant
		public RuleCall getBoolConstantParserRuleCall_0() { return cBoolConstantParserRuleCall_0; }
		
		//BoolNumCompExpression
		public RuleCall getBoolNumCompExpressionParserRuleCall_1() { return cBoolNumCompExpressionParserRuleCall_1; }
		
		//BoolCompExpression
		public RuleCall getBoolCompExpressionParserRuleCall_2() { return cBoolCompExpressionParserRuleCall_2; }
	}
	public class BoolConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.BoolConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValueTKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBoolConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//BoolConstant:
		//	value?="#t" | {BoolConstant} "#f";
		@Override public ParserRule getRule() { return rule; }
		
		//value?="#t" | {BoolConstant} "#f"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value?="#t"
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//"#t"
		public Keyword getValueTKeyword_0_0() { return cValueTKeyword_0_0; }
		
		//{BoolConstant} "#f"
		public Group getGroup_1() { return cGroup_1; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_1_0() { return cBoolConstantAction_1_0; }
		
		//"#f"
		public Keyword getFKeyword_1_1() { return cFKeyword_1_1; }
	}
	public class BoolNumCompExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.BoolNumCompExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCompAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCompAlternatives_1_0 = (Alternatives)cCompAssignment_1.eContents().get(0);
		private final Keyword cCompLessThanSignKeyword_1_0_0 = (Keyword)cCompAlternatives_1_0.eContents().get(0);
		private final Keyword cCompGreaterThanSignKeyword_1_0_1 = (Keyword)cCompAlternatives_1_0.eContents().get(1);
		private final Keyword cCompEqualsSignKeyword_1_0_2 = (Keyword)cCompAlternatives_1_0.eContents().get(2);
		private final Keyword cCompLessThanSignEqualsSignKeyword_1_0_3 = (Keyword)cCompAlternatives_1_0.eContents().get(3);
		private final Keyword cCompGreaterThanSignEqualsSignKeyword_1_0_4 = (Keyword)cCompAlternatives_1_0.eContents().get(4);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cE1Alternatives_2_0 = (Alternatives)cE1Assignment_2.eContents().get(0);
		private final RuleCall cE1NumberExpressionParserRuleCall_2_0_0 = (RuleCall)cE1Alternatives_2_0.eContents().get(0);
		private final RuleCall cE1ParamCallExpressionParserRuleCall_2_0_1 = (RuleCall)cE1Alternatives_2_0.eContents().get(1);
		private final RuleCall cE1FunctionCallExpressionParserRuleCall_2_0_2 = (RuleCall)cE1Alternatives_2_0.eContents().get(2);
		private final Assignment cE2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cE2Alternatives_3_0 = (Alternatives)cE2Assignment_3.eContents().get(0);
		private final RuleCall cE2NumberExpressionParserRuleCall_3_0_0 = (RuleCall)cE2Alternatives_3_0.eContents().get(0);
		private final RuleCall cE2ParamCallExpressionParserRuleCall_3_0_1 = (RuleCall)cE2Alternatives_3_0.eContents().get(1);
		private final RuleCall cE2FunctionCallExpressionParserRuleCall_3_0_2 = (RuleCall)cE2Alternatives_3_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BoolNumCompExpression:
		//	"(" comp=("<" | ">" | "=" | "<=" | ">=") e1=(NumberExpression | ParamCallExpression | FunctionCallExpression)
		//	e2=(NumberExpression | ParamCallExpression | FunctionCallExpression) ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" comp=("<" | ">" | "=" | "<=" | ">=") e1=(NumberExpression | ParamCallExpression | FunctionCallExpression)
		//e2=(NumberExpression | ParamCallExpression | FunctionCallExpression) ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//comp=("<" | ">" | "=" | "<=" | ">=")
		public Assignment getCompAssignment_1() { return cCompAssignment_1; }
		
		//("<" | ">" | "=" | "<=" | ">=")
		public Alternatives getCompAlternatives_1_0() { return cCompAlternatives_1_0; }
		
		//"<"
		public Keyword getCompLessThanSignKeyword_1_0_0() { return cCompLessThanSignKeyword_1_0_0; }
		
		//">"
		public Keyword getCompGreaterThanSignKeyword_1_0_1() { return cCompGreaterThanSignKeyword_1_0_1; }
		
		//"="
		public Keyword getCompEqualsSignKeyword_1_0_2() { return cCompEqualsSignKeyword_1_0_2; }
		
		//"<="
		public Keyword getCompLessThanSignEqualsSignKeyword_1_0_3() { return cCompLessThanSignEqualsSignKeyword_1_0_3; }
		
		//">="
		public Keyword getCompGreaterThanSignEqualsSignKeyword_1_0_4() { return cCompGreaterThanSignEqualsSignKeyword_1_0_4; }
		
		//e1=(NumberExpression | ParamCallExpression | FunctionCallExpression)
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }
		
		//(NumberExpression | ParamCallExpression | FunctionCallExpression)
		public Alternatives getE1Alternatives_2_0() { return cE1Alternatives_2_0; }
		
		//NumberExpression
		public RuleCall getE1NumberExpressionParserRuleCall_2_0_0() { return cE1NumberExpressionParserRuleCall_2_0_0; }
		
		//ParamCallExpression
		public RuleCall getE1ParamCallExpressionParserRuleCall_2_0_1() { return cE1ParamCallExpressionParserRuleCall_2_0_1; }
		
		//FunctionCallExpression
		public RuleCall getE1FunctionCallExpressionParserRuleCall_2_0_2() { return cE1FunctionCallExpressionParserRuleCall_2_0_2; }
		
		//e2=(NumberExpression | ParamCallExpression | FunctionCallExpression)
		public Assignment getE2Assignment_3() { return cE2Assignment_3; }
		
		//(NumberExpression | ParamCallExpression | FunctionCallExpression)
		public Alternatives getE2Alternatives_3_0() { return cE2Alternatives_3_0; }
		
		//NumberExpression
		public RuleCall getE2NumberExpressionParserRuleCall_3_0_0() { return cE2NumberExpressionParserRuleCall_3_0_0; }
		
		//ParamCallExpression
		public RuleCall getE2ParamCallExpressionParserRuleCall_3_0_1() { return cE2ParamCallExpressionParserRuleCall_3_0_1; }
		
		//FunctionCallExpression
		public RuleCall getE2FunctionCallExpressionParserRuleCall_3_0_2() { return cE2FunctionCallExpressionParserRuleCall_3_0_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class BoolCompExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.BoolCompExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cEqualKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1ExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Assignment cE2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cE2ExpressionParserRuleCall_3_0 = (RuleCall)cE2Assignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BoolCompExpression:
		//	"(" ("eq?" | "equal?") e1=Expression e2=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" ("eq?" | "equal?") e1=Expression e2=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"eq?" | "equal?"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"eq?"
		public Keyword getEqKeyword_1_0() { return cEqKeyword_1_0; }
		
		//"equal?"
		public Keyword getEqualKeyword_1_1() { return cEqualKeyword_1_1; }
		
		//e1=Expression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }
		
		//Expression
		public RuleCall getE1ExpressionParserRuleCall_2_0() { return cE1ExpressionParserRuleCall_2_0; }
		
		//e2=Expression
		public Assignment getE2Assignment_3() { return cE2Assignment_3; }
		
		//Expression
		public RuleCall getE2ExpressionParserRuleCall_3_0() { return cE2ExpressionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class StrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.StrExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StrExpression:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class ListExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.ListExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cListKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsExpressionParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListExpression:
		//	{ListExpression} "(" "list" args+=Expression* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{ListExpression} "(" "list" args+=Expression* ")"
		public Group getGroup() { return cGroup; }
		
		//{ListExpression}
		public Action getListExpressionAction_0() { return cListExpressionAction_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//"list"
		public Keyword getListKeyword_2() { return cListKeyword_2; }
		
		//args+=Expression*
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_0() { return cArgsExpressionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PrintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.PrintExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPrintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PrintExpression:
		//	"(" "print" expr=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "print" expr=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"print"
		public Keyword getPrintKeyword_1() { return cPrintKeyword_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ListOpExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.ListOpExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCarExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCdrExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLengthExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEmptyExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConsExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ListOpExpression:
		//	CarExpression | CdrExpression | LengthExpression | EmptyExpression | ConsExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//CarExpression | CdrExpression | LengthExpression | EmptyExpression | ConsExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CarExpression
		public RuleCall getCarExpressionParserRuleCall_0() { return cCarExpressionParserRuleCall_0; }
		
		//CdrExpression
		public RuleCall getCdrExpressionParserRuleCall_1() { return cCdrExpressionParserRuleCall_1; }
		
		//LengthExpression
		public RuleCall getLengthExpressionParserRuleCall_2() { return cLengthExpressionParserRuleCall_2; }
		
		//EmptyExpression
		public RuleCall getEmptyExpressionParserRuleCall_3() { return cEmptyExpressionParserRuleCall_3; }
		
		//ConsExpression
		public RuleCall getConsExpressionParserRuleCall_4() { return cConsExpressionParserRuleCall_4; }
	}
	public class CarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.CarExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cListAlternatives_2_0 = (Alternatives)cListAssignment_2.eContents().get(0);
		private final RuleCall cListListExpressionParserRuleCall_2_0_0 = (RuleCall)cListAlternatives_2_0.eContents().get(0);
		private final RuleCall cListCdrExpressionParserRuleCall_2_0_1 = (RuleCall)cListAlternatives_2_0.eContents().get(1);
		private final RuleCall cListParamCallExpressionParserRuleCall_2_0_2 = (RuleCall)cListAlternatives_2_0.eContents().get(2);
		private final RuleCall cListFunctionCallExpressionParserRuleCall_2_0_3 = (RuleCall)cListAlternatives_2_0.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CarExpression:
		//	"(" "car" list=(ListExpression | CdrExpression | ParamCallExpression | FunctionCallExpression) ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "car" list=(ListExpression | CdrExpression | ParamCallExpression | FunctionCallExpression) ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"car"
		public Keyword getCarKeyword_1() { return cCarKeyword_1; }
		
		//list=(ListExpression | CdrExpression | ParamCallExpression | FunctionCallExpression)
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//(ListExpression | CdrExpression | ParamCallExpression | FunctionCallExpression)
		public Alternatives getListAlternatives_2_0() { return cListAlternatives_2_0; }
		
		//ListExpression
		public RuleCall getListListExpressionParserRuleCall_2_0_0() { return cListListExpressionParserRuleCall_2_0_0; }
		
		//CdrExpression
		public RuleCall getListCdrExpressionParserRuleCall_2_0_1() { return cListCdrExpressionParserRuleCall_2_0_1; }
		
		//ParamCallExpression
		public RuleCall getListParamCallExpressionParserRuleCall_2_0_2() { return cListParamCallExpressionParserRuleCall_2_0_2; }
		
		//FunctionCallExpression
		public RuleCall getListFunctionCallExpressionParserRuleCall_2_0_3() { return cListFunctionCallExpressionParserRuleCall_2_0_3; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class CdrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.CdrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCdrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cListAlternatives_2_0 = (Alternatives)cListAssignment_2.eContents().get(0);
		private final RuleCall cListListExpressionParserRuleCall_2_0_0 = (RuleCall)cListAlternatives_2_0.eContents().get(0);
		private final RuleCall cListCdrExpressionParserRuleCall_2_0_1 = (RuleCall)cListAlternatives_2_0.eContents().get(1);
		private final RuleCall cListParamCallExpressionParserRuleCall_2_0_2 = (RuleCall)cListAlternatives_2_0.eContents().get(2);
		private final RuleCall cListFunctionCallExpressionParserRuleCall_2_0_3 = (RuleCall)cListAlternatives_2_0.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CdrExpression:
		//	"(" "cdr" list=(ListExpression | CdrExpression | ParamCallExpression | FunctionCallExpression) ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "cdr" list=(ListExpression | CdrExpression | ParamCallExpression | FunctionCallExpression) ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"cdr"
		public Keyword getCdrKeyword_1() { return cCdrKeyword_1; }
		
		//list=(ListExpression | CdrExpression | ParamCallExpression | FunctionCallExpression)
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//(ListExpression | CdrExpression | ParamCallExpression | FunctionCallExpression)
		public Alternatives getListAlternatives_2_0() { return cListAlternatives_2_0; }
		
		//ListExpression
		public RuleCall getListListExpressionParserRuleCall_2_0_0() { return cListListExpressionParserRuleCall_2_0_0; }
		
		//CdrExpression
		public RuleCall getListCdrExpressionParserRuleCall_2_0_1() { return cListCdrExpressionParserRuleCall_2_0_1; }
		
		//ParamCallExpression
		public RuleCall getListParamCallExpressionParserRuleCall_2_0_2() { return cListParamCallExpressionParserRuleCall_2_0_2; }
		
		//FunctionCallExpression
		public RuleCall getListFunctionCallExpressionParserRuleCall_2_0_3() { return cListFunctionCallExpressionParserRuleCall_2_0_3; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LengthExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.LengthExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLengthKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cListAlternatives_2_0 = (Alternatives)cListAssignment_2.eContents().get(0);
		private final RuleCall cListListExpressionParserRuleCall_2_0_0 = (RuleCall)cListAlternatives_2_0.eContents().get(0);
		private final RuleCall cListCdrExpressionParserRuleCall_2_0_1 = (RuleCall)cListAlternatives_2_0.eContents().get(1);
		private final RuleCall cListParamCallExpressionParserRuleCall_2_0_2 = (RuleCall)cListAlternatives_2_0.eContents().get(2);
		private final RuleCall cListConsExpressionParserRuleCall_2_0_3 = (RuleCall)cListAlternatives_2_0.eContents().get(3);
		private final RuleCall cListFunctionCallExpressionParserRuleCall_2_0_4 = (RuleCall)cListAlternatives_2_0.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LengthExpression:
		//	"(" "length" list=(ListExpression | CdrExpression | ParamCallExpression | ConsExpression | FunctionCallExpression)
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "length" list=(ListExpression | CdrExpression | ParamCallExpression | ConsExpression | FunctionCallExpression) ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"length"
		public Keyword getLengthKeyword_1() { return cLengthKeyword_1; }
		
		//list=(ListExpression | CdrExpression | ParamCallExpression | ConsExpression | FunctionCallExpression)
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//(ListExpression | CdrExpression | ParamCallExpression | ConsExpression | FunctionCallExpression)
		public Alternatives getListAlternatives_2_0() { return cListAlternatives_2_0; }
		
		//ListExpression
		public RuleCall getListListExpressionParserRuleCall_2_0_0() { return cListListExpressionParserRuleCall_2_0_0; }
		
		//CdrExpression
		public RuleCall getListCdrExpressionParserRuleCall_2_0_1() { return cListCdrExpressionParserRuleCall_2_0_1; }
		
		//ParamCallExpression
		public RuleCall getListParamCallExpressionParserRuleCall_2_0_2() { return cListParamCallExpressionParserRuleCall_2_0_2; }
		
		//ConsExpression
		public RuleCall getListConsExpressionParserRuleCall_2_0_3() { return cListConsExpressionParserRuleCall_2_0_3; }
		
		//FunctionCallExpression
		public RuleCall getListFunctionCallExpressionParserRuleCall_2_0_4() { return cListFunctionCallExpressionParserRuleCall_2_0_4; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EmptyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.EmptyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEmptyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cListAlternatives_2_0 = (Alternatives)cListAssignment_2.eContents().get(0);
		private final RuleCall cListListExpressionParserRuleCall_2_0_0 = (RuleCall)cListAlternatives_2_0.eContents().get(0);
		private final RuleCall cListListOpExpressionParserRuleCall_2_0_1 = (RuleCall)cListAlternatives_2_0.eContents().get(1);
		private final RuleCall cListFunctionCallExpressionParserRuleCall_2_0_2 = (RuleCall)cListAlternatives_2_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EmptyExpression:
		//	"(" "empty?" list=(ListExpression | ListOpExpression | FunctionCallExpression) ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "empty?" list=(ListExpression | ListOpExpression | FunctionCallExpression) ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"empty?"
		public Keyword getEmptyKeyword_1() { return cEmptyKeyword_1; }
		
		//list=(ListExpression | ListOpExpression | FunctionCallExpression)
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//(ListExpression | ListOpExpression | FunctionCallExpression)
		public Alternatives getListAlternatives_2_0() { return cListAlternatives_2_0; }
		
		//ListExpression
		public RuleCall getListListExpressionParserRuleCall_2_0_0() { return cListListExpressionParserRuleCall_2_0_0; }
		
		//ListOpExpression
		public RuleCall getListListOpExpressionParserRuleCall_2_0_1() { return cListListOpExpressionParserRuleCall_2_0_1; }
		
		//FunctionCallExpression
		public RuleCall getListFunctionCallExpressionParserRuleCall_2_0_2() { return cListFunctionCallExpressionParserRuleCall_2_0_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ConsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.ConsExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cConsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Assignment cListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cListListExpressionParserRuleCall_3_0 = (RuleCall)cListAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConsExpression:
		//	"(" "cons" expr=Expression list=ListExpression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "cons" expr=Expression list=ListExpression ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"cons"
		public Keyword getConsKeyword_1() { return cConsKeyword_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//list=ListExpression
		public Assignment getListAssignment_3() { return cListAssignment_3; }
		
		//ListExpression
		public RuleCall getListListExpressionParserRuleCall_3_0() { return cListListExpressionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class StrOpExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.StrOpExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStrLenExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStrAppExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StrOpExpression:
		//	StrLenExpression | StrAppExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//StrLenExpression | StrAppExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StrLenExpression
		public RuleCall getStrLenExpressionParserRuleCall_0() { return cStrLenExpressionParserRuleCall_0; }
		
		//StrAppExpression
		public RuleCall getStrAppExpressionParserRuleCall_1() { return cStrAppExpressionParserRuleCall_1; }
	}
	public class StrLenExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.StrLenExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStringLengthKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStrStrExpressionParserRuleCall_2_0 = (RuleCall)cStrAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StrLenExpression:
		//	"(" "string-length" str=StrExpression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "string-length" str=StrExpression ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"string-length"
		public Keyword getStringLengthKeyword_1() { return cStringLengthKeyword_1; }
		
		//str=StrExpression
		public Assignment getStrAssignment_2() { return cStrAssignment_2; }
		
		//StrExpression
		public RuleCall getStrStrExpressionParserRuleCall_2_0() { return cStrStrExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class StrAppExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.StrAppExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStringAppendKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStr1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cStr1Alternatives_2_0 = (Alternatives)cStr1Assignment_2.eContents().get(0);
		private final RuleCall cStr1StrExpressionParserRuleCall_2_0_0 = (RuleCall)cStr1Alternatives_2_0.eContents().get(0);
		private final RuleCall cStr1ParamCallExpressionParserRuleCall_2_0_1 = (RuleCall)cStr1Alternatives_2_0.eContents().get(1);
		private final RuleCall cStr1FunctionCallExpressionParserRuleCall_2_0_2 = (RuleCall)cStr1Alternatives_2_0.eContents().get(2);
		private final Assignment cStr2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cStr2Alternatives_3_0 = (Alternatives)cStr2Assignment_3.eContents().get(0);
		private final RuleCall cStr2StrExpressionParserRuleCall_3_0_0 = (RuleCall)cStr2Alternatives_3_0.eContents().get(0);
		private final RuleCall cStr2ParamCallExpressionParserRuleCall_3_0_1 = (RuleCall)cStr2Alternatives_3_0.eContents().get(1);
		private final RuleCall cStr2FunctionCallExpressionParserRuleCall_3_0_2 = (RuleCall)cStr2Alternatives_3_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StrAppExpression:
		//	"(" "string-append" str1=(StrExpression | ParamCallExpression | FunctionCallExpression) str2=(StrExpression |
		//	ParamCallExpression | FunctionCallExpression) ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "string-append" str1=(StrExpression | ParamCallExpression | FunctionCallExpression) str2=(StrExpression |
		//ParamCallExpression | FunctionCallExpression) ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"string-append"
		public Keyword getStringAppendKeyword_1() { return cStringAppendKeyword_1; }
		
		//str1=(StrExpression | ParamCallExpression | FunctionCallExpression)
		public Assignment getStr1Assignment_2() { return cStr1Assignment_2; }
		
		//(StrExpression | ParamCallExpression | FunctionCallExpression)
		public Alternatives getStr1Alternatives_2_0() { return cStr1Alternatives_2_0; }
		
		//StrExpression
		public RuleCall getStr1StrExpressionParserRuleCall_2_0_0() { return cStr1StrExpressionParserRuleCall_2_0_0; }
		
		//ParamCallExpression
		public RuleCall getStr1ParamCallExpressionParserRuleCall_2_0_1() { return cStr1ParamCallExpressionParserRuleCall_2_0_1; }
		
		//FunctionCallExpression
		public RuleCall getStr1FunctionCallExpressionParserRuleCall_2_0_2() { return cStr1FunctionCallExpressionParserRuleCall_2_0_2; }
		
		//str2=(StrExpression | ParamCallExpression | FunctionCallExpression)
		public Assignment getStr2Assignment_3() { return cStr2Assignment_3; }
		
		//(StrExpression | ParamCallExpression | FunctionCallExpression)
		public Alternatives getStr2Alternatives_3_0() { return cStr2Alternatives_3_0; }
		
		//StrExpression
		public RuleCall getStr2StrExpressionParserRuleCall_3_0_0() { return cStr2StrExpressionParserRuleCall_3_0_0; }
		
		//ParamCallExpression
		public RuleCall getStr2ParamCallExpressionParserRuleCall_3_0_1() { return cStr2ParamCallExpressionParserRuleCall_3_0_1; }
		
		//FunctionCallExpression
		public RuleCall getStr2FunctionCallExpressionParserRuleCall_3_0_2() { return cStr2FunctionCallExpressionParserRuleCall_3_0_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ParamCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.ParamCallExpression");
		private final Assignment cParamAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cParamIDTerminalRuleCall_0 = (RuleCall)cParamAssignment.eContents().get(0);
		
		//ParamCallExpression:
		//	param=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//param=ID
		public Assignment getParamAssignment() { return cParamAssignment; }
		
		//ID
		public RuleCall getParamIDTerminalRuleCall_0() { return cParamIDTerminalRuleCall_0; }
	}
	public class ArithExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.ArithExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Keyword cOpAsteriskKeyword_1_0_2 = (Keyword)cOpAlternatives_1_0.eContents().get(2);
		private final Keyword cOpSolidusKeyword_1_0_3 = (Keyword)cOpAlternatives_1_0.eContents().get(3);
		private final Assignment cArg1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cArg1Alternatives_2_0 = (Alternatives)cArg1Assignment_2.eContents().get(0);
		private final RuleCall cArg1NumberExpressionParserRuleCall_2_0_0 = (RuleCall)cArg1Alternatives_2_0.eContents().get(0);
		private final RuleCall cArg1ParamCallExpressionParserRuleCall_2_0_1 = (RuleCall)cArg1Alternatives_2_0.eContents().get(1);
		private final RuleCall cArg1FunctionCallExpressionParserRuleCall_2_0_2 = (RuleCall)cArg1Alternatives_2_0.eContents().get(2);
		private final Assignment cOargsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cOargsAlternatives_3_0 = (Alternatives)cOargsAssignment_3.eContents().get(0);
		private final RuleCall cOargsNumberExpressionParserRuleCall_3_0_0 = (RuleCall)cOargsAlternatives_3_0.eContents().get(0);
		private final RuleCall cOargsParamCallExpressionParserRuleCall_3_0_1 = (RuleCall)cOargsAlternatives_3_0.eContents().get(1);
		private final RuleCall cOargsFunctionCallExpressionParserRuleCall_3_0_2 = (RuleCall)cOargsAlternatives_3_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ArithExpression:
		//	"(" op=("+" | "-" | "*" | "/") arg1=(NumberExpression | ParamCallExpression | FunctionCallExpression)
		//	oargs+=(NumberExpression | ParamCallExpression | FunctionCallExpression)+ ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" op=("+" | "-" | "*" | "/") arg1=(NumberExpression | ParamCallExpression | FunctionCallExpression)
		//oargs+=(NumberExpression | ParamCallExpression | FunctionCallExpression)+ ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//op=("+" | "-" | "*" | "/")
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//("+" | "-" | "*" | "/")
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//"+"
		public Keyword getOpPlusSignKeyword_1_0_0() { return cOpPlusSignKeyword_1_0_0; }
		
		//"-"
		public Keyword getOpHyphenMinusKeyword_1_0_1() { return cOpHyphenMinusKeyword_1_0_1; }
		
		//"*"
		public Keyword getOpAsteriskKeyword_1_0_2() { return cOpAsteriskKeyword_1_0_2; }
		
		//"/"
		public Keyword getOpSolidusKeyword_1_0_3() { return cOpSolidusKeyword_1_0_3; }
		
		//arg1=(NumberExpression | ParamCallExpression | FunctionCallExpression)
		public Assignment getArg1Assignment_2() { return cArg1Assignment_2; }
		
		//(NumberExpression | ParamCallExpression | FunctionCallExpression)
		public Alternatives getArg1Alternatives_2_0() { return cArg1Alternatives_2_0; }
		
		//NumberExpression
		public RuleCall getArg1NumberExpressionParserRuleCall_2_0_0() { return cArg1NumberExpressionParserRuleCall_2_0_0; }
		
		//ParamCallExpression
		public RuleCall getArg1ParamCallExpressionParserRuleCall_2_0_1() { return cArg1ParamCallExpressionParserRuleCall_2_0_1; }
		
		//FunctionCallExpression
		public RuleCall getArg1FunctionCallExpressionParserRuleCall_2_0_2() { return cArg1FunctionCallExpressionParserRuleCall_2_0_2; }
		
		//oargs+=(NumberExpression | ParamCallExpression | FunctionCallExpression)+
		public Assignment getOargsAssignment_3() { return cOargsAssignment_3; }
		
		//(NumberExpression | ParamCallExpression | FunctionCallExpression)
		public Alternatives getOargsAlternatives_3_0() { return cOargsAlternatives_3_0; }
		
		//NumberExpression
		public RuleCall getOargsNumberExpressionParserRuleCall_3_0_0() { return cOargsNumberExpressionParserRuleCall_3_0_0; }
		
		//ParamCallExpression
		public RuleCall getOargsParamCallExpressionParserRuleCall_3_0_1() { return cOargsParamCallExpressionParserRuleCall_3_0_1; }
		
		//FunctionCallExpression
		public RuleCall getOargsFunctionCallExpressionParserRuleCall_3_0_2() { return cOargsFunctionCallExpressionParserRuleCall_3_0_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondBoolExpressionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExpressionParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Assignment cElseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseExpressionParserRuleCall_4_0 = (RuleCall)cElseAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IfExpression:
		//	"(" "if" cond=BoolExpression then=Expression else=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "if" cond=BoolExpression then=Expression else=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//cond=BoolExpression
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//BoolExpression
		public RuleCall getCondBoolExpressionParserRuleCall_2_0() { return cCondBoolExpressionParserRuleCall_2_0; }
		
		//then=Expression
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//Expression
		public RuleCall getThenExpressionParserRuleCall_3_0() { return cThenExpressionParserRuleCall_3_0; }
		
		//else=Expression
		public Assignment getElseAssignment_4() { return cElseAssignment_4; }
		
		//Expression
		public RuleCall getElseExpressionParserRuleCall_4_0() { return cElseExpressionParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class FunctionCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.FunctionCallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionDefineCrossReference_1_0 = (CrossReference)cFunctionAssignment_1.eContents().get(0);
		private final RuleCall cFunctionDefineIDTerminalRuleCall_1_0_1 = (RuleCall)cFunctionDefineCrossReference_1_0.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsExpressionParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCallExpression:
		//	"(" function=[Define] args+=Expression* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" function=[Define] args+=Expression* ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//function=[Define]
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//[Define]
		public CrossReference getFunctionDefineCrossReference_1_0() { return cFunctionDefineCrossReference_1_0; }
		
		//ID
		public RuleCall getFunctionDefineIDTerminalRuleCall_1_0_1() { return cFunctionDefineIDTerminalRuleCall_1_0_1; }
		
		//args+=Expression*
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_0() { return cArgsExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class WhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosCheetos.WhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondBoolExpressionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Assignment cDoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDoExpressionParserRuleCall_3_0 = (RuleCall)cDoAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WhileExpression:
		//	"(" "while" cond=BoolExpression do+=Expression+ ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "while" cond=BoolExpression do+=Expression+ ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"while"
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }
		
		//cond=BoolExpression
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//BoolExpression
		public RuleCall getCondBoolExpressionParserRuleCall_2_0() { return cCondBoolExpressionParserRuleCall_2_0; }
		
		//do+=Expression+
		public Assignment getDoAssignment_3() { return cDoAssignment_3; }
		
		//Expression
		public RuleCall getDoExpressionParserRuleCall_3_0() { return cDoExpressionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	private final MyRacketProgramElements pMyRacketProgram;
	private final DefineElements pDefine;
	private final ExpressionElements pExpression;
	private final SimpleExpressionElements pSimpleExpression;
	private final NumberExpressionElements pNumberExpression;
	private final IntExpressionElements pIntExpression;
	private final DoubleExpressionElements pDoubleExpression;
	private final FracExpressionElements pFracExpression;
	private final CompExpressionElements pCompExpression;
	private final BoolExpressionElements pBoolExpression;
	private final BoolConstantElements pBoolConstant;
	private final BoolNumCompExpressionElements pBoolNumCompExpression;
	private final BoolCompExpressionElements pBoolCompExpression;
	private final StrExpressionElements pStrExpression;
	private final ListExpressionElements pListExpression;
	private final PrintExpressionElements pPrintExpression;
	private final ListOpExpressionElements pListOpExpression;
	private final CarExpressionElements pCarExpression;
	private final CdrExpressionElements pCdrExpression;
	private final LengthExpressionElements pLengthExpression;
	private final EmptyExpressionElements pEmptyExpression;
	private final ConsExpressionElements pConsExpression;
	private final StrOpExpressionElements pStrOpExpression;
	private final StrLenExpressionElements pStrLenExpression;
	private final StrAppExpressionElements pStrAppExpression;
	private final ParamCallExpressionElements pParamCallExpression;
	private final ArithExpressionElements pArithExpression;
	private final IfExpressionElements pIfExpression;
	private final FunctionCallExpressionElements pFunctionCallExpression;
	private final WhileExpressionElements pWhileExpression;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LosCheetosGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMyRacketProgram = new MyRacketProgramElements();
		this.pDefine = new DefineElements();
		this.pExpression = new ExpressionElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pNumberExpression = new NumberExpressionElements();
		this.pIntExpression = new IntExpressionElements();
		this.pDoubleExpression = new DoubleExpressionElements();
		this.pFracExpression = new FracExpressionElements();
		this.pCompExpression = new CompExpressionElements();
		this.pBoolExpression = new BoolExpressionElements();
		this.pBoolConstant = new BoolConstantElements();
		this.pBoolNumCompExpression = new BoolNumCompExpressionElements();
		this.pBoolCompExpression = new BoolCompExpressionElements();
		this.pStrExpression = new StrExpressionElements();
		this.pListExpression = new ListExpressionElements();
		this.pPrintExpression = new PrintExpressionElements();
		this.pListOpExpression = new ListOpExpressionElements();
		this.pCarExpression = new CarExpressionElements();
		this.pCdrExpression = new CdrExpressionElements();
		this.pLengthExpression = new LengthExpressionElements();
		this.pEmptyExpression = new EmptyExpressionElements();
		this.pConsExpression = new ConsExpressionElements();
		this.pStrOpExpression = new StrOpExpressionElements();
		this.pStrLenExpression = new StrLenExpressionElements();
		this.pStrAppExpression = new StrAppExpressionElements();
		this.pParamCallExpression = new ParamCallExpressionElements();
		this.pArithExpression = new ArithExpressionElements();
		this.pIfExpression = new IfExpressionElements();
		this.pFunctionCallExpression = new FunctionCallExpressionElements();
		this.pWhileExpression = new WhileExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.upb.lp.isc.LosCheetos".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MyRacketProgram:
	//	("Definitions" ":"
	//	defines+=Define+)?
	//	"Executions" ":"
	//	executions+=Expression+;
	public MyRacketProgramElements getMyRacketProgramAccess() {
		return pMyRacketProgram;
	}
	
	public ParserRule getMyRacketProgramRule() {
		return getMyRacketProgramAccess().getRule();
	}
	
	//Define:
	//	"(" "define" "(" name=ID params+=ID* ")" body+=Expression+ ")";
	public DefineElements getDefineAccess() {
		return pDefine;
	}
	
	public ParserRule getDefineRule() {
		return getDefineAccess().getRule();
	}
	
	//Expression:
	//	SimpleExpression | NumberExpression | IfExpression | FunctionCallExpression | WhileExpression | ParamCallExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//SimpleExpression:
	//	BoolExpression | StrExpression | ListExpression | PrintExpression | ListOpExpression | StrOpExpression;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}
	
	//NumberExpression:
	//	IntExpression | DoubleExpression | FracExpression | CompExpression | ArithExpression;
	public NumberExpressionElements getNumberExpressionAccess() {
		return pNumberExpression;
	}
	
	public ParserRule getNumberExpressionRule() {
		return getNumberExpressionAccess().getRule();
	}
	
	//IntExpression:
	//	value=INT;
	public IntExpressionElements getIntExpressionAccess() {
		return pIntExpression;
	}
	
	public ParserRule getIntExpressionRule() {
		return getIntExpressionAccess().getRule();
	}
	
	//DoubleExpression:
	//	"(" "double" "(" int=INT dec=INT ")" ")";
	public DoubleExpressionElements getDoubleExpressionAccess() {
		return pDoubleExpression;
	}
	
	public ParserRule getDoubleExpressionRule() {
		return getDoubleExpressionAccess().getRule();
	}
	
	//FracExpression:
	//	"(" "fraction" "(" num=INT dec=INT ")" ")";
	public FracExpressionElements getFracExpressionAccess() {
		return pFracExpression;
	}
	
	public ParserRule getFracExpressionRule() {
		return getFracExpressionAccess().getRule();
	}
	
	//CompExpression:
	//	"(" "complex" "(" real=INT imag=INT ")" ")";
	public CompExpressionElements getCompExpressionAccess() {
		return pCompExpression;
	}
	
	public ParserRule getCompExpressionRule() {
		return getCompExpressionAccess().getRule();
	}
	
	//BoolExpression:
	//	BoolConstant | BoolNumCompExpression | BoolCompExpression;
	public BoolExpressionElements getBoolExpressionAccess() {
		return pBoolExpression;
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}
	
	//BoolConstant:
	//	value?="#t" | {BoolConstant} "#f";
	public BoolConstantElements getBoolConstantAccess() {
		return pBoolConstant;
	}
	
	public ParserRule getBoolConstantRule() {
		return getBoolConstantAccess().getRule();
	}
	
	//BoolNumCompExpression:
	//	"(" comp=("<" | ">" | "=" | "<=" | ">=") e1=(NumberExpression | ParamCallExpression | FunctionCallExpression)
	//	e2=(NumberExpression | ParamCallExpression | FunctionCallExpression) ")";
	public BoolNumCompExpressionElements getBoolNumCompExpressionAccess() {
		return pBoolNumCompExpression;
	}
	
	public ParserRule getBoolNumCompExpressionRule() {
		return getBoolNumCompExpressionAccess().getRule();
	}
	
	//BoolCompExpression:
	//	"(" ("eq?" | "equal?") e1=Expression e2=Expression ")";
	public BoolCompExpressionElements getBoolCompExpressionAccess() {
		return pBoolCompExpression;
	}
	
	public ParserRule getBoolCompExpressionRule() {
		return getBoolCompExpressionAccess().getRule();
	}
	
	//StrExpression:
	//	value=STRING;
	public StrExpressionElements getStrExpressionAccess() {
		return pStrExpression;
	}
	
	public ParserRule getStrExpressionRule() {
		return getStrExpressionAccess().getRule();
	}
	
	//ListExpression:
	//	{ListExpression} "(" "list" args+=Expression* ")";
	public ListExpressionElements getListExpressionAccess() {
		return pListExpression;
	}
	
	public ParserRule getListExpressionRule() {
		return getListExpressionAccess().getRule();
	}
	
	//PrintExpression:
	//	"(" "print" expr=Expression ")";
	public PrintExpressionElements getPrintExpressionAccess() {
		return pPrintExpression;
	}
	
	public ParserRule getPrintExpressionRule() {
		return getPrintExpressionAccess().getRule();
	}
	
	//ListOpExpression:
	//	CarExpression | CdrExpression | LengthExpression | EmptyExpression | ConsExpression;
	public ListOpExpressionElements getListOpExpressionAccess() {
		return pListOpExpression;
	}
	
	public ParserRule getListOpExpressionRule() {
		return getListOpExpressionAccess().getRule();
	}
	
	//CarExpression:
	//	"(" "car" list=(ListExpression | CdrExpression | ParamCallExpression | FunctionCallExpression) ")";
	public CarExpressionElements getCarExpressionAccess() {
		return pCarExpression;
	}
	
	public ParserRule getCarExpressionRule() {
		return getCarExpressionAccess().getRule();
	}
	
	//CdrExpression:
	//	"(" "cdr" list=(ListExpression | CdrExpression | ParamCallExpression | FunctionCallExpression) ")";
	public CdrExpressionElements getCdrExpressionAccess() {
		return pCdrExpression;
	}
	
	public ParserRule getCdrExpressionRule() {
		return getCdrExpressionAccess().getRule();
	}
	
	//LengthExpression:
	//	"(" "length" list=(ListExpression | CdrExpression | ParamCallExpression | ConsExpression | FunctionCallExpression)
	//	")";
	public LengthExpressionElements getLengthExpressionAccess() {
		return pLengthExpression;
	}
	
	public ParserRule getLengthExpressionRule() {
		return getLengthExpressionAccess().getRule();
	}
	
	//EmptyExpression:
	//	"(" "empty?" list=(ListExpression | ListOpExpression | FunctionCallExpression) ")";
	public EmptyExpressionElements getEmptyExpressionAccess() {
		return pEmptyExpression;
	}
	
	public ParserRule getEmptyExpressionRule() {
		return getEmptyExpressionAccess().getRule();
	}
	
	//ConsExpression:
	//	"(" "cons" expr=Expression list=ListExpression ")";
	public ConsExpressionElements getConsExpressionAccess() {
		return pConsExpression;
	}
	
	public ParserRule getConsExpressionRule() {
		return getConsExpressionAccess().getRule();
	}
	
	//StrOpExpression:
	//	StrLenExpression | StrAppExpression;
	public StrOpExpressionElements getStrOpExpressionAccess() {
		return pStrOpExpression;
	}
	
	public ParserRule getStrOpExpressionRule() {
		return getStrOpExpressionAccess().getRule();
	}
	
	//StrLenExpression:
	//	"(" "string-length" str=StrExpression ")";
	public StrLenExpressionElements getStrLenExpressionAccess() {
		return pStrLenExpression;
	}
	
	public ParserRule getStrLenExpressionRule() {
		return getStrLenExpressionAccess().getRule();
	}
	
	//StrAppExpression:
	//	"(" "string-append" str1=(StrExpression | ParamCallExpression | FunctionCallExpression) str2=(StrExpression |
	//	ParamCallExpression | FunctionCallExpression) ")";
	public StrAppExpressionElements getStrAppExpressionAccess() {
		return pStrAppExpression;
	}
	
	public ParserRule getStrAppExpressionRule() {
		return getStrAppExpressionAccess().getRule();
	}
	
	//ParamCallExpression:
	//	param=ID;
	public ParamCallExpressionElements getParamCallExpressionAccess() {
		return pParamCallExpression;
	}
	
	public ParserRule getParamCallExpressionRule() {
		return getParamCallExpressionAccess().getRule();
	}
	
	//ArithExpression:
	//	"(" op=("+" | "-" | "*" | "/") arg1=(NumberExpression | ParamCallExpression | FunctionCallExpression)
	//	oargs+=(NumberExpression | ParamCallExpression | FunctionCallExpression)+ ")";
	public ArithExpressionElements getArithExpressionAccess() {
		return pArithExpression;
	}
	
	public ParserRule getArithExpressionRule() {
		return getArithExpressionAccess().getRule();
	}
	
	//IfExpression:
	//	"(" "if" cond=BoolExpression then=Expression else=Expression ")";
	public IfExpressionElements getIfExpressionAccess() {
		return pIfExpression;
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}
	
	//FunctionCallExpression:
	//	"(" function=[Define] args+=Expression* ")";
	public FunctionCallExpressionElements getFunctionCallExpressionAccess() {
		return pFunctionCallExpression;
	}
	
	public ParserRule getFunctionCallExpressionRule() {
		return getFunctionCallExpressionAccess().getRule();
	}
	
	//WhileExpression:
	//	"(" "while" cond=BoolExpression do+=Expression+ ")";
	public WhileExpressionElements getWhileExpressionAccess() {
		return pWhileExpression;
	}
	
	public ParserRule getWhileExpressionRule() {
		return getWhileExpressionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
