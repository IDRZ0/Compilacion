/*
 * generated by Xtext 2.11.0
 */
grammar InternalLosCheetos;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package edu.upb.lp.isc.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package edu.upb.lp.isc.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import edu.upb.lp.isc.services.LosCheetosGrammarAccess;

}
@parser::members {
	private LosCheetosGrammarAccess grammarAccess;

	public void setGrammarAccess(LosCheetosGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMyRacketProgram
entryRuleMyRacketProgram
:
{ before(grammarAccess.getMyRacketProgramRule()); }
	 ruleMyRacketProgram
{ after(grammarAccess.getMyRacketProgramRule()); } 
	 EOF 
;

// Rule MyRacketProgram
ruleMyRacketProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getGroup()); }
		(rule__MyRacketProgram__Group__0)
		{ after(grammarAccess.getMyRacketProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefine
entryRuleDefine
:
{ before(grammarAccess.getDefineRule()); }
	 ruleDefine
{ after(grammarAccess.getDefineRule()); } 
	 EOF 
;

// Rule Define
ruleDefine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefineAccess().getGroup()); }
		(rule__Define__Group__0)
		{ after(grammarAccess.getDefineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression
:
{ before(grammarAccess.getSimpleExpressionRule()); }
	 ruleSimpleExpression
{ after(grammarAccess.getSimpleExpressionRule()); } 
	 EOF 
;

// Rule SimpleExpression
ruleSimpleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleExpressionAccess().getAlternatives()); }
		(rule__SimpleExpression__Alternatives)
		{ after(grammarAccess.getSimpleExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberExpression
entryRuleNumberExpression
:
{ before(grammarAccess.getNumberExpressionRule()); }
	 ruleNumberExpression
{ after(grammarAccess.getNumberExpressionRule()); } 
	 EOF 
;

// Rule NumberExpression
ruleNumberExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberExpressionAccess().getAlternatives()); }
		(rule__NumberExpression__Alternatives)
		{ after(grammarAccess.getNumberExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntExpression
entryRuleIntExpression
:
{ before(grammarAccess.getIntExpressionRule()); }
	 ruleIntExpression
{ after(grammarAccess.getIntExpressionRule()); } 
	 EOF 
;

// Rule IntExpression
ruleIntExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntExpressionAccess().getValueAssignment()); }
		(rule__IntExpression__ValueAssignment)
		{ after(grammarAccess.getIntExpressionAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDoubleExpression
entryRuleDoubleExpression
:
{ before(grammarAccess.getDoubleExpressionRule()); }
	 ruleDoubleExpression
{ after(grammarAccess.getDoubleExpressionRule()); } 
	 EOF 
;

// Rule DoubleExpression
ruleDoubleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDoubleExpressionAccess().getGroup()); }
		(rule__DoubleExpression__Group__0)
		{ after(grammarAccess.getDoubleExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFracExpression
entryRuleFracExpression
:
{ before(grammarAccess.getFracExpressionRule()); }
	 ruleFracExpression
{ after(grammarAccess.getFracExpressionRule()); } 
	 EOF 
;

// Rule FracExpression
ruleFracExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFracExpressionAccess().getGroup()); }
		(rule__FracExpression__Group__0)
		{ after(grammarAccess.getFracExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompExpression
entryRuleCompExpression
:
{ before(grammarAccess.getCompExpressionRule()); }
	 ruleCompExpression
{ after(grammarAccess.getCompExpressionRule()); } 
	 EOF 
;

// Rule CompExpression
ruleCompExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompExpressionAccess().getGroup()); }
		(rule__CompExpression__Group__0)
		{ after(grammarAccess.getCompExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolExpression
entryRuleBoolExpression
:
{ before(grammarAccess.getBoolExpressionRule()); }
	 ruleBoolExpression
{ after(grammarAccess.getBoolExpressionRule()); } 
	 EOF 
;

// Rule BoolExpression
ruleBoolExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolExpressionAccess().getAlternatives()); }
		(rule__BoolExpression__Alternatives)
		{ after(grammarAccess.getBoolExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolConstant
entryRuleBoolConstant
:
{ before(grammarAccess.getBoolConstantRule()); }
	 ruleBoolConstant
{ after(grammarAccess.getBoolConstantRule()); } 
	 EOF 
;

// Rule BoolConstant
ruleBoolConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolConstantAccess().getAlternatives()); }
		(rule__BoolConstant__Alternatives)
		{ after(grammarAccess.getBoolConstantAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolNumCompExpression
entryRuleBoolNumCompExpression
:
{ before(grammarAccess.getBoolNumCompExpressionRule()); }
	 ruleBoolNumCompExpression
{ after(grammarAccess.getBoolNumCompExpressionRule()); } 
	 EOF 
;

// Rule BoolNumCompExpression
ruleBoolNumCompExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolNumCompExpressionAccess().getGroup()); }
		(rule__BoolNumCompExpression__Group__0)
		{ after(grammarAccess.getBoolNumCompExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolCompExpression
entryRuleBoolCompExpression
:
{ before(grammarAccess.getBoolCompExpressionRule()); }
	 ruleBoolCompExpression
{ after(grammarAccess.getBoolCompExpressionRule()); } 
	 EOF 
;

// Rule BoolCompExpression
ruleBoolCompExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolCompExpressionAccess().getGroup()); }
		(rule__BoolCompExpression__Group__0)
		{ after(grammarAccess.getBoolCompExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStrExpression
entryRuleStrExpression
:
{ before(grammarAccess.getStrExpressionRule()); }
	 ruleStrExpression
{ after(grammarAccess.getStrExpressionRule()); } 
	 EOF 
;

// Rule StrExpression
ruleStrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStrExpressionAccess().getValueAssignment()); }
		(rule__StrExpression__ValueAssignment)
		{ after(grammarAccess.getStrExpressionAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListExpression
entryRuleListExpression
:
{ before(grammarAccess.getListExpressionRule()); }
	 ruleListExpression
{ after(grammarAccess.getListExpressionRule()); } 
	 EOF 
;

// Rule ListExpression
ruleListExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListExpressionAccess().getGroup()); }
		(rule__ListExpression__Group__0)
		{ after(grammarAccess.getListExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrintExpression
entryRulePrintExpression
:
{ before(grammarAccess.getPrintExpressionRule()); }
	 rulePrintExpression
{ after(grammarAccess.getPrintExpressionRule()); } 
	 EOF 
;

// Rule PrintExpression
rulePrintExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintExpressionAccess().getGroup()); }
		(rule__PrintExpression__Group__0)
		{ after(grammarAccess.getPrintExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListOpExpression
entryRuleListOpExpression
:
{ before(grammarAccess.getListOpExpressionRule()); }
	 ruleListOpExpression
{ after(grammarAccess.getListOpExpressionRule()); } 
	 EOF 
;

// Rule ListOpExpression
ruleListOpExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListOpExpressionAccess().getAlternatives()); }
		(rule__ListOpExpression__Alternatives)
		{ after(grammarAccess.getListOpExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCarExpression
entryRuleCarExpression
:
{ before(grammarAccess.getCarExpressionRule()); }
	 ruleCarExpression
{ after(grammarAccess.getCarExpressionRule()); } 
	 EOF 
;

// Rule CarExpression
ruleCarExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCarExpressionAccess().getGroup()); }
		(rule__CarExpression__Group__0)
		{ after(grammarAccess.getCarExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCdrExpression
entryRuleCdrExpression
:
{ before(grammarAccess.getCdrExpressionRule()); }
	 ruleCdrExpression
{ after(grammarAccess.getCdrExpressionRule()); } 
	 EOF 
;

// Rule CdrExpression
ruleCdrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCdrExpressionAccess().getGroup()); }
		(rule__CdrExpression__Group__0)
		{ after(grammarAccess.getCdrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLengthExpression
entryRuleLengthExpression
:
{ before(grammarAccess.getLengthExpressionRule()); }
	 ruleLengthExpression
{ after(grammarAccess.getLengthExpressionRule()); } 
	 EOF 
;

// Rule LengthExpression
ruleLengthExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLengthExpressionAccess().getGroup()); }
		(rule__LengthExpression__Group__0)
		{ after(grammarAccess.getLengthExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEmptyExpression
entryRuleEmptyExpression
:
{ before(grammarAccess.getEmptyExpressionRule()); }
	 ruleEmptyExpression
{ after(grammarAccess.getEmptyExpressionRule()); } 
	 EOF 
;

// Rule EmptyExpression
ruleEmptyExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEmptyExpressionAccess().getGroup()); }
		(rule__EmptyExpression__Group__0)
		{ after(grammarAccess.getEmptyExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConsExpression
entryRuleConsExpression
:
{ before(grammarAccess.getConsExpressionRule()); }
	 ruleConsExpression
{ after(grammarAccess.getConsExpressionRule()); } 
	 EOF 
;

// Rule ConsExpression
ruleConsExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConsExpressionAccess().getGroup()); }
		(rule__ConsExpression__Group__0)
		{ after(grammarAccess.getConsExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStrOpExpression
entryRuleStrOpExpression
:
{ before(grammarAccess.getStrOpExpressionRule()); }
	 ruleStrOpExpression
{ after(grammarAccess.getStrOpExpressionRule()); } 
	 EOF 
;

// Rule StrOpExpression
ruleStrOpExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStrOpExpressionAccess().getAlternatives()); }
		(rule__StrOpExpression__Alternatives)
		{ after(grammarAccess.getStrOpExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStrLenExpression
entryRuleStrLenExpression
:
{ before(grammarAccess.getStrLenExpressionRule()); }
	 ruleStrLenExpression
{ after(grammarAccess.getStrLenExpressionRule()); } 
	 EOF 
;

// Rule StrLenExpression
ruleStrLenExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStrLenExpressionAccess().getGroup()); }
		(rule__StrLenExpression__Group__0)
		{ after(grammarAccess.getStrLenExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStrAppExpression
entryRuleStrAppExpression
:
{ before(grammarAccess.getStrAppExpressionRule()); }
	 ruleStrAppExpression
{ after(grammarAccess.getStrAppExpressionRule()); } 
	 EOF 
;

// Rule StrAppExpression
ruleStrAppExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStrAppExpressionAccess().getGroup()); }
		(rule__StrAppExpression__Group__0)
		{ after(grammarAccess.getStrAppExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParamCallExpression
entryRuleParamCallExpression
:
{ before(grammarAccess.getParamCallExpressionRule()); }
	 ruleParamCallExpression
{ after(grammarAccess.getParamCallExpressionRule()); } 
	 EOF 
;

// Rule ParamCallExpression
ruleParamCallExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParamCallExpressionAccess().getParamAssignment()); }
		(rule__ParamCallExpression__ParamAssignment)
		{ after(grammarAccess.getParamCallExpressionAccess().getParamAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithExpression
entryRuleArithExpression
:
{ before(grammarAccess.getArithExpressionRule()); }
	 ruleArithExpression
{ after(grammarAccess.getArithExpressionRule()); } 
	 EOF 
;

// Rule ArithExpression
ruleArithExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithExpressionAccess().getGroup()); }
		(rule__ArithExpression__Group__0)
		{ after(grammarAccess.getArithExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfExpression
entryRuleIfExpression
:
{ before(grammarAccess.getIfExpressionRule()); }
	 ruleIfExpression
{ after(grammarAccess.getIfExpressionRule()); } 
	 EOF 
;

// Rule IfExpression
ruleIfExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfExpressionAccess().getGroup()); }
		(rule__IfExpression__Group__0)
		{ after(grammarAccess.getIfExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCallExpression
entryRuleFunctionCallExpression
:
{ before(grammarAccess.getFunctionCallExpressionRule()); }
	 ruleFunctionCallExpression
{ after(grammarAccess.getFunctionCallExpressionRule()); } 
	 EOF 
;

// Rule FunctionCallExpression
ruleFunctionCallExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallExpressionAccess().getGroup()); }
		(rule__FunctionCallExpression__Group__0)
		{ after(grammarAccess.getFunctionCallExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhileExpression
entryRuleWhileExpression
:
{ before(grammarAccess.getWhileExpressionRule()); }
	 ruleWhileExpression
{ after(grammarAccess.getWhileExpressionRule()); } 
	 EOF 
;

// Rule WhileExpression
ruleWhileExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileExpressionAccess().getGroup()); }
		(rule__WhileExpression__Group__0)
		{ after(grammarAccess.getWhileExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getSimpleExpressionParserRuleCall_0()); }
		ruleSimpleExpression
		{ after(grammarAccess.getExpressionAccess().getSimpleExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getNumberExpressionParserRuleCall_1()); }
		ruleNumberExpression
		{ after(grammarAccess.getExpressionAccess().getNumberExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getIfExpressionParserRuleCall_2()); }
		ruleIfExpression
		{ after(grammarAccess.getExpressionAccess().getIfExpressionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getFunctionCallExpressionParserRuleCall_3()); }
		ruleFunctionCallExpression
		{ after(grammarAccess.getExpressionAccess().getFunctionCallExpressionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getWhileExpressionParserRuleCall_4()); }
		ruleWhileExpression
		{ after(grammarAccess.getExpressionAccess().getWhileExpressionParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getParamCallExpressionParserRuleCall_5()); }
		ruleParamCallExpression
		{ after(grammarAccess.getExpressionAccess().getParamCallExpressionParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleExpressionAccess().getBoolExpressionParserRuleCall_0()); }
		ruleBoolExpression
		{ after(grammarAccess.getSimpleExpressionAccess().getBoolExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleExpressionAccess().getStrExpressionParserRuleCall_1()); }
		ruleStrExpression
		{ after(grammarAccess.getSimpleExpressionAccess().getStrExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleExpressionAccess().getListExpressionParserRuleCall_2()); }
		ruleListExpression
		{ after(grammarAccess.getSimpleExpressionAccess().getListExpressionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleExpressionAccess().getPrintExpressionParserRuleCall_3()); }
		rulePrintExpression
		{ after(grammarAccess.getSimpleExpressionAccess().getPrintExpressionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleExpressionAccess().getListOpExpressionParserRuleCall_4()); }
		ruleListOpExpression
		{ after(grammarAccess.getSimpleExpressionAccess().getListOpExpressionParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleExpressionAccess().getStrOpExpressionParserRuleCall_5()); }
		ruleStrOpExpression
		{ after(grammarAccess.getSimpleExpressionAccess().getStrOpExpressionParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberExpressionAccess().getIntExpressionParserRuleCall_0()); }
		ruleIntExpression
		{ after(grammarAccess.getNumberExpressionAccess().getIntExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberExpressionAccess().getDoubleExpressionParserRuleCall_1()); }
		ruleDoubleExpression
		{ after(grammarAccess.getNumberExpressionAccess().getDoubleExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getNumberExpressionAccess().getFracExpressionParserRuleCall_2()); }
		ruleFracExpression
		{ after(grammarAccess.getNumberExpressionAccess().getFracExpressionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getNumberExpressionAccess().getCompExpressionParserRuleCall_3()); }
		ruleCompExpression
		{ after(grammarAccess.getNumberExpressionAccess().getCompExpressionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getNumberExpressionAccess().getArithExpressionParserRuleCall_4()); }
		ruleArithExpression
		{ after(grammarAccess.getNumberExpressionAccess().getArithExpressionParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolExpressionAccess().getBoolConstantParserRuleCall_0()); }
		ruleBoolConstant
		{ after(grammarAccess.getBoolExpressionAccess().getBoolConstantParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolExpressionAccess().getBoolNumCompExpressionParserRuleCall_1()); }
		ruleBoolNumCompExpression
		{ after(grammarAccess.getBoolExpressionAccess().getBoolNumCompExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getBoolExpressionAccess().getBoolCompExpressionParserRuleCall_2()); }
		ruleBoolCompExpression
		{ after(grammarAccess.getBoolExpressionAccess().getBoolCompExpressionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConstant__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolConstantAccess().getValueAssignment_0()); }
		(rule__BoolConstant__ValueAssignment_0)
		{ after(grammarAccess.getBoolConstantAccess().getValueAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolConstantAccess().getGroup_1()); }
		(rule__BoolConstant__Group_1__0)
		{ after(grammarAccess.getBoolConstantAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolNumCompExpression__CompAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolNumCompExpressionAccess().getCompLessThanSignKeyword_1_0_0()); }
		'<'
		{ after(grammarAccess.getBoolNumCompExpressionAccess().getCompLessThanSignKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolNumCompExpressionAccess().getCompGreaterThanSignKeyword_1_0_1()); }
		'>'
		{ after(grammarAccess.getBoolNumCompExpressionAccess().getCompGreaterThanSignKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getBoolNumCompExpressionAccess().getCompEqualsSignKeyword_1_0_2()); }
		'='
		{ after(grammarAccess.getBoolNumCompExpressionAccess().getCompEqualsSignKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getBoolNumCompExpressionAccess().getCompLessThanSignEqualsSignKeyword_1_0_3()); }
		'<='
		{ after(grammarAccess.getBoolNumCompExpressionAccess().getCompLessThanSignEqualsSignKeyword_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getBoolNumCompExpressionAccess().getCompGreaterThanSignEqualsSignKeyword_1_0_4()); }
		'>='
		{ after(grammarAccess.getBoolNumCompExpressionAccess().getCompGreaterThanSignEqualsSignKeyword_1_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolNumCompExpression__E1Alternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolNumCompExpressionAccess().getE1NumberExpressionParserRuleCall_2_0_0()); }
		ruleNumberExpression
		{ after(grammarAccess.getBoolNumCompExpressionAccess().getE1NumberExpressionParserRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolNumCompExpressionAccess().getE1ParamCallExpressionParserRuleCall_2_0_1()); }
		ruleParamCallExpression
		{ after(grammarAccess.getBoolNumCompExpressionAccess().getE1ParamCallExpressionParserRuleCall_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getBoolNumCompExpressionAccess().getE1FunctionCallExpressionParserRuleCall_2_0_2()); }
		ruleFunctionCallExpression
		{ after(grammarAccess.getBoolNumCompExpressionAccess().getE1FunctionCallExpressionParserRuleCall_2_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolNumCompExpression__E2Alternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolNumCompExpressionAccess().getE2NumberExpressionParserRuleCall_3_0_0()); }
		ruleNumberExpression
		{ after(grammarAccess.getBoolNumCompExpressionAccess().getE2NumberExpressionParserRuleCall_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolNumCompExpressionAccess().getE2ParamCallExpressionParserRuleCall_3_0_1()); }
		ruleParamCallExpression
		{ after(grammarAccess.getBoolNumCompExpressionAccess().getE2ParamCallExpressionParserRuleCall_3_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getBoolNumCompExpressionAccess().getE2FunctionCallExpressionParserRuleCall_3_0_2()); }
		ruleFunctionCallExpression
		{ after(grammarAccess.getBoolNumCompExpressionAccess().getE2FunctionCallExpressionParserRuleCall_3_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolCompExpression__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolCompExpressionAccess().getEqKeyword_1_0()); }
		'eq?'
		{ after(grammarAccess.getBoolCompExpressionAccess().getEqKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolCompExpressionAccess().getEqualKeyword_1_1()); }
		'equal?'
		{ after(grammarAccess.getBoolCompExpressionAccess().getEqualKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOpExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOpExpressionAccess().getCarExpressionParserRuleCall_0()); }
		ruleCarExpression
		{ after(grammarAccess.getListOpExpressionAccess().getCarExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getListOpExpressionAccess().getCdrExpressionParserRuleCall_1()); }
		ruleCdrExpression
		{ after(grammarAccess.getListOpExpressionAccess().getCdrExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getListOpExpressionAccess().getLengthExpressionParserRuleCall_2()); }
		ruleLengthExpression
		{ after(grammarAccess.getListOpExpressionAccess().getLengthExpressionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getListOpExpressionAccess().getEmptyExpressionParserRuleCall_3()); }
		ruleEmptyExpression
		{ after(grammarAccess.getListOpExpressionAccess().getEmptyExpressionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getListOpExpressionAccess().getConsExpressionParserRuleCall_4()); }
		ruleConsExpression
		{ after(grammarAccess.getListOpExpressionAccess().getConsExpressionParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CarExpression__ListAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCarExpressionAccess().getListListExpressionParserRuleCall_2_0_0()); }
		ruleListExpression
		{ after(grammarAccess.getCarExpressionAccess().getListListExpressionParserRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCarExpressionAccess().getListCdrExpressionParserRuleCall_2_0_1()); }
		ruleCdrExpression
		{ after(grammarAccess.getCarExpressionAccess().getListCdrExpressionParserRuleCall_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getCarExpressionAccess().getListParamCallExpressionParserRuleCall_2_0_2()); }
		ruleParamCallExpression
		{ after(grammarAccess.getCarExpressionAccess().getListParamCallExpressionParserRuleCall_2_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getCarExpressionAccess().getListFunctionCallExpressionParserRuleCall_2_0_3()); }
		ruleFunctionCallExpression
		{ after(grammarAccess.getCarExpressionAccess().getListFunctionCallExpressionParserRuleCall_2_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CdrExpression__ListAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCdrExpressionAccess().getListListExpressionParserRuleCall_2_0_0()); }
		ruleListExpression
		{ after(grammarAccess.getCdrExpressionAccess().getListListExpressionParserRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCdrExpressionAccess().getListCdrExpressionParserRuleCall_2_0_1()); }
		ruleCdrExpression
		{ after(grammarAccess.getCdrExpressionAccess().getListCdrExpressionParserRuleCall_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getCdrExpressionAccess().getListParamCallExpressionParserRuleCall_2_0_2()); }
		ruleParamCallExpression
		{ after(grammarAccess.getCdrExpressionAccess().getListParamCallExpressionParserRuleCall_2_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getCdrExpressionAccess().getListFunctionCallExpressionParserRuleCall_2_0_3()); }
		ruleFunctionCallExpression
		{ after(grammarAccess.getCdrExpressionAccess().getListFunctionCallExpressionParserRuleCall_2_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthExpression__ListAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLengthExpressionAccess().getListListExpressionParserRuleCall_2_0_0()); }
		ruleListExpression
		{ after(grammarAccess.getLengthExpressionAccess().getListListExpressionParserRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLengthExpressionAccess().getListCdrExpressionParserRuleCall_2_0_1()); }
		ruleCdrExpression
		{ after(grammarAccess.getLengthExpressionAccess().getListCdrExpressionParserRuleCall_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getLengthExpressionAccess().getListParamCallExpressionParserRuleCall_2_0_2()); }
		ruleParamCallExpression
		{ after(grammarAccess.getLengthExpressionAccess().getListParamCallExpressionParserRuleCall_2_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getLengthExpressionAccess().getListConsExpressionParserRuleCall_2_0_3()); }
		ruleConsExpression
		{ after(grammarAccess.getLengthExpressionAccess().getListConsExpressionParserRuleCall_2_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getLengthExpressionAccess().getListFunctionCallExpressionParserRuleCall_2_0_4()); }
		ruleFunctionCallExpression
		{ after(grammarAccess.getLengthExpressionAccess().getListFunctionCallExpressionParserRuleCall_2_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyExpression__ListAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEmptyExpressionAccess().getListListExpressionParserRuleCall_2_0_0()); }
		ruleListExpression
		{ after(grammarAccess.getEmptyExpressionAccess().getListListExpressionParserRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEmptyExpressionAccess().getListListOpExpressionParserRuleCall_2_0_1()); }
		ruleListOpExpression
		{ after(grammarAccess.getEmptyExpressionAccess().getListListOpExpressionParserRuleCall_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getEmptyExpressionAccess().getListFunctionCallExpressionParserRuleCall_2_0_2()); }
		ruleFunctionCallExpression
		{ after(grammarAccess.getEmptyExpressionAccess().getListFunctionCallExpressionParserRuleCall_2_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StrOpExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStrOpExpressionAccess().getStrLenExpressionParserRuleCall_0()); }
		ruleStrLenExpression
		{ after(grammarAccess.getStrOpExpressionAccess().getStrLenExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStrOpExpressionAccess().getStrAppExpressionParserRuleCall_1()); }
		ruleStrAppExpression
		{ after(grammarAccess.getStrOpExpressionAccess().getStrAppExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StrAppExpression__Str1Alternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStrAppExpressionAccess().getStr1StrExpressionParserRuleCall_2_0_0()); }
		ruleStrExpression
		{ after(grammarAccess.getStrAppExpressionAccess().getStr1StrExpressionParserRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStrAppExpressionAccess().getStr1ParamCallExpressionParserRuleCall_2_0_1()); }
		ruleParamCallExpression
		{ after(grammarAccess.getStrAppExpressionAccess().getStr1ParamCallExpressionParserRuleCall_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getStrAppExpressionAccess().getStr1FunctionCallExpressionParserRuleCall_2_0_2()); }
		ruleFunctionCallExpression
		{ after(grammarAccess.getStrAppExpressionAccess().getStr1FunctionCallExpressionParserRuleCall_2_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StrAppExpression__Str2Alternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStrAppExpressionAccess().getStr2StrExpressionParserRuleCall_3_0_0()); }
		ruleStrExpression
		{ after(grammarAccess.getStrAppExpressionAccess().getStr2StrExpressionParserRuleCall_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStrAppExpressionAccess().getStr2ParamCallExpressionParserRuleCall_3_0_1()); }
		ruleParamCallExpression
		{ after(grammarAccess.getStrAppExpressionAccess().getStr2ParamCallExpressionParserRuleCall_3_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getStrAppExpressionAccess().getStr2FunctionCallExpressionParserRuleCall_3_0_2()); }
		ruleFunctionCallExpression
		{ after(grammarAccess.getStrAppExpressionAccess().getStr2FunctionCallExpressionParserRuleCall_3_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__OpAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithExpressionAccess().getOpPlusSignKeyword_1_0_0()); }
		'+'
		{ after(grammarAccess.getArithExpressionAccess().getOpPlusSignKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getArithExpressionAccess().getOpHyphenMinusKeyword_1_0_1()); }
		'-'
		{ after(grammarAccess.getArithExpressionAccess().getOpHyphenMinusKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getArithExpressionAccess().getOpAsteriskKeyword_1_0_2()); }
		'*'
		{ after(grammarAccess.getArithExpressionAccess().getOpAsteriskKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getArithExpressionAccess().getOpSolidusKeyword_1_0_3()); }
		'/'
		{ after(grammarAccess.getArithExpressionAccess().getOpSolidusKeyword_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Arg1Alternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithExpressionAccess().getArg1NumberExpressionParserRuleCall_2_0_0()); }
		ruleNumberExpression
		{ after(grammarAccess.getArithExpressionAccess().getArg1NumberExpressionParserRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getArithExpressionAccess().getArg1ParamCallExpressionParserRuleCall_2_0_1()); }
		ruleParamCallExpression
		{ after(grammarAccess.getArithExpressionAccess().getArg1ParamCallExpressionParserRuleCall_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getArithExpressionAccess().getArg1FunctionCallExpressionParserRuleCall_2_0_2()); }
		ruleFunctionCallExpression
		{ after(grammarAccess.getArithExpressionAccess().getArg1FunctionCallExpressionParserRuleCall_2_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__OargsAlternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithExpressionAccess().getOargsNumberExpressionParserRuleCall_3_0_0()); }
		ruleNumberExpression
		{ after(grammarAccess.getArithExpressionAccess().getOargsNumberExpressionParserRuleCall_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getArithExpressionAccess().getOargsParamCallExpressionParserRuleCall_3_0_1()); }
		ruleParamCallExpression
		{ after(grammarAccess.getArithExpressionAccess().getOargsParamCallExpressionParserRuleCall_3_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getArithExpressionAccess().getOargsFunctionCallExpressionParserRuleCall_3_0_2()); }
		ruleFunctionCallExpression
		{ after(grammarAccess.getArithExpressionAccess().getOargsFunctionCallExpressionParserRuleCall_3_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyRacketProgram__Group__0__Impl
	rule__MyRacketProgram__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyRacketProgramAccess().getGroup_0()); }
	(rule__MyRacketProgram__Group_0__0)?
	{ after(grammarAccess.getMyRacketProgramAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyRacketProgram__Group__1__Impl
	rule__MyRacketProgram__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyRacketProgramAccess().getExecutionsKeyword_1()); }
	'Executions'
	{ after(grammarAccess.getMyRacketProgramAccess().getExecutionsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyRacketProgram__Group__2__Impl
	rule__MyRacketProgram__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyRacketProgramAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getMyRacketProgramAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyRacketProgram__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getExecutionsAssignment_3()); }
		(rule__MyRacketProgram__ExecutionsAssignment_3)
		{ after(grammarAccess.getMyRacketProgramAccess().getExecutionsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getExecutionsAssignment_3()); }
		(rule__MyRacketProgram__ExecutionsAssignment_3)*
		{ after(grammarAccess.getMyRacketProgramAccess().getExecutionsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MyRacketProgram__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyRacketProgram__Group_0__0__Impl
	rule__MyRacketProgram__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyRacketProgramAccess().getDefinitionsKeyword_0_0()); }
	'Definitions'
	{ after(grammarAccess.getMyRacketProgramAccess().getDefinitionsKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyRacketProgram__Group_0__1__Impl
	rule__MyRacketProgram__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyRacketProgramAccess().getColonKeyword_0_1()); }
	':'
	{ after(grammarAccess.getMyRacketProgramAccess().getColonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyRacketProgram__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getDefinesAssignment_0_2()); }
		(rule__MyRacketProgram__DefinesAssignment_0_2)
		{ after(grammarAccess.getMyRacketProgramAccess().getDefinesAssignment_0_2()); }
	)
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getDefinesAssignment_0_2()); }
		(rule__MyRacketProgram__DefinesAssignment_0_2)*
		{ after(grammarAccess.getMyRacketProgramAccess().getDefinesAssignment_0_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Define__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__0__Impl
	rule__Define__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getDefineAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__1__Impl
	rule__Define__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getDefineKeyword_1()); }
	'define'
	{ after(grammarAccess.getDefineAccess().getDefineKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__2__Impl
	rule__Define__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getDefineAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__3__Impl
	rule__Define__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getNameAssignment_3()); }
	(rule__Define__NameAssignment_3)
	{ after(grammarAccess.getDefineAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__4__Impl
	rule__Define__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getParamsAssignment_4()); }
	(rule__Define__ParamsAssignment_4)*
	{ after(grammarAccess.getDefineAccess().getParamsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__5__Impl
	rule__Define__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getDefineAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__6__Impl
	rule__Define__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getDefineAccess().getBodyAssignment_6()); }
		(rule__Define__BodyAssignment_6)
		{ after(grammarAccess.getDefineAccess().getBodyAssignment_6()); }
	)
	(
		{ before(grammarAccess.getDefineAccess().getBodyAssignment_6()); }
		(rule__Define__BodyAssignment_6)*
		{ after(grammarAccess.getDefineAccess().getBodyAssignment_6()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getDefineAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoubleExpression__Group__0__Impl
	rule__DoubleExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoubleExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getDoubleExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoubleExpression__Group__1__Impl
	rule__DoubleExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoubleExpressionAccess().getDoubleKeyword_1()); }
	'double'
	{ after(grammarAccess.getDoubleExpressionAccess().getDoubleKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoubleExpression__Group__2__Impl
	rule__DoubleExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoubleExpressionAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getDoubleExpressionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoubleExpression__Group__3__Impl
	rule__DoubleExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoubleExpressionAccess().getIntAssignment_3()); }
	(rule__DoubleExpression__IntAssignment_3)
	{ after(grammarAccess.getDoubleExpressionAccess().getIntAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoubleExpression__Group__4__Impl
	rule__DoubleExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoubleExpressionAccess().getDecAssignment_4()); }
	(rule__DoubleExpression__DecAssignment_4)
	{ after(grammarAccess.getDoubleExpressionAccess().getDecAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleExpression__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoubleExpression__Group__5__Impl
	rule__DoubleExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleExpression__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoubleExpressionAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getDoubleExpressionAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleExpression__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoubleExpression__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleExpression__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoubleExpressionAccess().getRightParenthesisKeyword_6()); }
	')'
	{ after(grammarAccess.getDoubleExpressionAccess().getRightParenthesisKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FracExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FracExpression__Group__0__Impl
	rule__FracExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FracExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFracExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getFracExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FracExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FracExpression__Group__1__Impl
	rule__FracExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FracExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFracExpressionAccess().getFractionKeyword_1()); }
	'fraction'
	{ after(grammarAccess.getFracExpressionAccess().getFractionKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FracExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FracExpression__Group__2__Impl
	rule__FracExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FracExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFracExpressionAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getFracExpressionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FracExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FracExpression__Group__3__Impl
	rule__FracExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FracExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFracExpressionAccess().getNumAssignment_3()); }
	(rule__FracExpression__NumAssignment_3)
	{ after(grammarAccess.getFracExpressionAccess().getNumAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FracExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FracExpression__Group__4__Impl
	rule__FracExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FracExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFracExpressionAccess().getDecAssignment_4()); }
	(rule__FracExpression__DecAssignment_4)
	{ after(grammarAccess.getFracExpressionAccess().getDecAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FracExpression__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FracExpression__Group__5__Impl
	rule__FracExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FracExpression__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFracExpressionAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getFracExpressionAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FracExpression__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FracExpression__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FracExpression__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFracExpressionAccess().getRightParenthesisKeyword_6()); }
	')'
	{ after(grammarAccess.getFracExpressionAccess().getRightParenthesisKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group__0__Impl
	rule__CompExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getCompExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group__1__Impl
	rule__CompExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getComplexKeyword_1()); }
	'complex'
	{ after(grammarAccess.getCompExpressionAccess().getComplexKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group__2__Impl
	rule__CompExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getCompExpressionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group__3__Impl
	rule__CompExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getRealAssignment_3()); }
	(rule__CompExpression__RealAssignment_3)
	{ after(grammarAccess.getCompExpressionAccess().getRealAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group__4__Impl
	rule__CompExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getImagAssignment_4()); }
	(rule__CompExpression__ImagAssignment_4)
	{ after(grammarAccess.getCompExpressionAccess().getImagAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group__5__Impl
	rule__CompExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getCompExpressionAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getRightParenthesisKeyword_6()); }
	')'
	{ after(grammarAccess.getCompExpressionAccess().getRightParenthesisKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolConstant__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolConstant__Group_1__0__Impl
	rule__BoolConstant__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConstant__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolConstantAccess().getBoolConstantAction_1_0()); }
	()
	{ after(grammarAccess.getBoolConstantAccess().getBoolConstantAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConstant__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolConstant__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConstant__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolConstantAccess().getFKeyword_1_1()); }
	'#f'
	{ after(grammarAccess.getBoolConstantAccess().getFKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolNumCompExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolNumCompExpression__Group__0__Impl
	rule__BoolNumCompExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolNumCompExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolNumCompExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getBoolNumCompExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolNumCompExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolNumCompExpression__Group__1__Impl
	rule__BoolNumCompExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolNumCompExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolNumCompExpressionAccess().getCompAssignment_1()); }
	(rule__BoolNumCompExpression__CompAssignment_1)
	{ after(grammarAccess.getBoolNumCompExpressionAccess().getCompAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolNumCompExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolNumCompExpression__Group__2__Impl
	rule__BoolNumCompExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolNumCompExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolNumCompExpressionAccess().getE1Assignment_2()); }
	(rule__BoolNumCompExpression__E1Assignment_2)
	{ after(grammarAccess.getBoolNumCompExpressionAccess().getE1Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolNumCompExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolNumCompExpression__Group__3__Impl
	rule__BoolNumCompExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolNumCompExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolNumCompExpressionAccess().getE2Assignment_3()); }
	(rule__BoolNumCompExpression__E2Assignment_3)
	{ after(grammarAccess.getBoolNumCompExpressionAccess().getE2Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolNumCompExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolNumCompExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolNumCompExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolNumCompExpressionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getBoolNumCompExpressionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolCompExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolCompExpression__Group__0__Impl
	rule__BoolCompExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolCompExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolCompExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getBoolCompExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolCompExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolCompExpression__Group__1__Impl
	rule__BoolCompExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolCompExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolCompExpressionAccess().getAlternatives_1()); }
	(rule__BoolCompExpression__Alternatives_1)
	{ after(grammarAccess.getBoolCompExpressionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolCompExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolCompExpression__Group__2__Impl
	rule__BoolCompExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolCompExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolCompExpressionAccess().getE1Assignment_2()); }
	(rule__BoolCompExpression__E1Assignment_2)
	{ after(grammarAccess.getBoolCompExpressionAccess().getE1Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolCompExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolCompExpression__Group__3__Impl
	rule__BoolCompExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolCompExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolCompExpressionAccess().getE2Assignment_3()); }
	(rule__BoolCompExpression__E2Assignment_3)
	{ after(grammarAccess.getBoolCompExpressionAccess().getE2Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolCompExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolCompExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolCompExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolCompExpressionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getBoolCompExpressionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListExpression__Group__0__Impl
	rule__ListExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListExpressionAccess().getListExpressionAction_0()); }
	()
	{ after(grammarAccess.getListExpressionAccess().getListExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListExpression__Group__1__Impl
	rule__ListExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListExpressionAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getListExpressionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListExpression__Group__2__Impl
	rule__ListExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListExpressionAccess().getListKeyword_2()); }
	'list'
	{ after(grammarAccess.getListExpressionAccess().getListKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListExpression__Group__3__Impl
	rule__ListExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ListExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListExpressionAccess().getArgsAssignment_3()); }
	(rule__ListExpression__ArgsAssignment_3)*
	{ after(grammarAccess.getListExpressionAccess().getArgsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListExpressionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getListExpressionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrintExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintExpression__Group__0__Impl
	rule__PrintExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getPrintExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintExpression__Group__1__Impl
	rule__PrintExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintExpressionAccess().getPrintKeyword_1()); }
	'print'
	{ after(grammarAccess.getPrintExpressionAccess().getPrintKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintExpression__Group__2__Impl
	rule__PrintExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintExpressionAccess().getExprAssignment_2()); }
	(rule__PrintExpression__ExprAssignment_2)
	{ after(grammarAccess.getPrintExpressionAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintExpressionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getPrintExpressionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CarExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CarExpression__Group__0__Impl
	rule__CarExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CarExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getCarExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CarExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CarExpression__Group__1__Impl
	rule__CarExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CarExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarExpressionAccess().getCarKeyword_1()); }
	'car'
	{ after(grammarAccess.getCarExpressionAccess().getCarKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CarExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CarExpression__Group__2__Impl
	rule__CarExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CarExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarExpressionAccess().getListAssignment_2()); }
	(rule__CarExpression__ListAssignment_2)
	{ after(grammarAccess.getCarExpressionAccess().getListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CarExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CarExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CarExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarExpressionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getCarExpressionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CdrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CdrExpression__Group__0__Impl
	rule__CdrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CdrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCdrExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getCdrExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CdrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CdrExpression__Group__1__Impl
	rule__CdrExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CdrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCdrExpressionAccess().getCdrKeyword_1()); }
	'cdr'
	{ after(grammarAccess.getCdrExpressionAccess().getCdrKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CdrExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CdrExpression__Group__2__Impl
	rule__CdrExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CdrExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCdrExpressionAccess().getListAssignment_2()); }
	(rule__CdrExpression__ListAssignment_2)
	{ after(grammarAccess.getCdrExpressionAccess().getListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CdrExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CdrExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CdrExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCdrExpressionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getCdrExpressionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LengthExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LengthExpression__Group__0__Impl
	rule__LengthExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLengthExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getLengthExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LengthExpression__Group__1__Impl
	rule__LengthExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLengthExpressionAccess().getLengthKeyword_1()); }
	'length'
	{ after(grammarAccess.getLengthExpressionAccess().getLengthKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LengthExpression__Group__2__Impl
	rule__LengthExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLengthExpressionAccess().getListAssignment_2()); }
	(rule__LengthExpression__ListAssignment_2)
	{ after(grammarAccess.getLengthExpressionAccess().getListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LengthExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLengthExpressionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getLengthExpressionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EmptyExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EmptyExpression__Group__0__Impl
	rule__EmptyExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmptyExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getEmptyExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EmptyExpression__Group__1__Impl
	rule__EmptyExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmptyExpressionAccess().getEmptyKeyword_1()); }
	'empty?'
	{ after(grammarAccess.getEmptyExpressionAccess().getEmptyKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EmptyExpression__Group__2__Impl
	rule__EmptyExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmptyExpressionAccess().getListAssignment_2()); }
	(rule__EmptyExpression__ListAssignment_2)
	{ after(grammarAccess.getEmptyExpressionAccess().getListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EmptyExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmptyExpressionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getEmptyExpressionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConsExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsExpression__Group__0__Impl
	rule__ConsExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getConsExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsExpression__Group__1__Impl
	rule__ConsExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsExpressionAccess().getConsKeyword_1()); }
	'cons'
	{ after(grammarAccess.getConsExpressionAccess().getConsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsExpression__Group__2__Impl
	rule__ConsExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsExpressionAccess().getExprAssignment_2()); }
	(rule__ConsExpression__ExprAssignment_2)
	{ after(grammarAccess.getConsExpressionAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsExpression__Group__3__Impl
	rule__ConsExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsExpressionAccess().getListAssignment_3()); }
	(rule__ConsExpression__ListAssignment_3)
	{ after(grammarAccess.getConsExpressionAccess().getListAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsExpressionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getConsExpressionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StrLenExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StrLenExpression__Group__0__Impl
	rule__StrLenExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StrLenExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStrLenExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getStrLenExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StrLenExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StrLenExpression__Group__1__Impl
	rule__StrLenExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StrLenExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStrLenExpressionAccess().getStringLengthKeyword_1()); }
	'string-length'
	{ after(grammarAccess.getStrLenExpressionAccess().getStringLengthKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StrLenExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StrLenExpression__Group__2__Impl
	rule__StrLenExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StrLenExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStrLenExpressionAccess().getStrAssignment_2()); }
	(rule__StrLenExpression__StrAssignment_2)
	{ after(grammarAccess.getStrLenExpressionAccess().getStrAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StrLenExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StrLenExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StrLenExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStrLenExpressionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getStrLenExpressionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StrAppExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StrAppExpression__Group__0__Impl
	rule__StrAppExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StrAppExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStrAppExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getStrAppExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StrAppExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StrAppExpression__Group__1__Impl
	rule__StrAppExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StrAppExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStrAppExpressionAccess().getStringAppendKeyword_1()); }
	'string-append'
	{ after(grammarAccess.getStrAppExpressionAccess().getStringAppendKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StrAppExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StrAppExpression__Group__2__Impl
	rule__StrAppExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StrAppExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStrAppExpressionAccess().getStr1Assignment_2()); }
	(rule__StrAppExpression__Str1Assignment_2)
	{ after(grammarAccess.getStrAppExpressionAccess().getStr1Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StrAppExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StrAppExpression__Group__3__Impl
	rule__StrAppExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StrAppExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStrAppExpressionAccess().getStr2Assignment_3()); }
	(rule__StrAppExpression__Str2Assignment_3)
	{ after(grammarAccess.getStrAppExpressionAccess().getStr2Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StrAppExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StrAppExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StrAppExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStrAppExpressionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getStrAppExpressionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithExpression__Group__0__Impl
	rule__ArithExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getArithExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithExpression__Group__1__Impl
	rule__ArithExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithExpressionAccess().getOpAssignment_1()); }
	(rule__ArithExpression__OpAssignment_1)
	{ after(grammarAccess.getArithExpressionAccess().getOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithExpression__Group__2__Impl
	rule__ArithExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithExpressionAccess().getArg1Assignment_2()); }
	(rule__ArithExpression__Arg1Assignment_2)
	{ after(grammarAccess.getArithExpressionAccess().getArg1Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithExpression__Group__3__Impl
	rule__ArithExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getArithExpressionAccess().getOargsAssignment_3()); }
		(rule__ArithExpression__OargsAssignment_3)
		{ after(grammarAccess.getArithExpressionAccess().getOargsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getArithExpressionAccess().getOargsAssignment_3()); }
		(rule__ArithExpression__OargsAssignment_3)*
		{ after(grammarAccess.getArithExpressionAccess().getOargsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithExpressionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getArithExpressionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__0__Impl
	rule__IfExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getIfExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__1__Impl
	rule__IfExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getIfKeyword_1()); }
	'if'
	{ after(grammarAccess.getIfExpressionAccess().getIfKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__2__Impl
	rule__IfExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getCondAssignment_2()); }
	(rule__IfExpression__CondAssignment_2)
	{ after(grammarAccess.getIfExpressionAccess().getCondAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__3__Impl
	rule__IfExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getThenAssignment_3()); }
	(rule__IfExpression__ThenAssignment_3)
	{ after(grammarAccess.getIfExpressionAccess().getThenAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__4__Impl
	rule__IfExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getElseAssignment_4()); }
	(rule__IfExpression__ElseAssignment_4)
	{ after(grammarAccess.getIfExpressionAccess().getElseAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getIfExpressionAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCallExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCallExpression__Group__0__Impl
	rule__FunctionCallExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getFunctionCallExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCallExpression__Group__1__Impl
	rule__FunctionCallExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallExpressionAccess().getFunctionAssignment_1()); }
	(rule__FunctionCallExpression__FunctionAssignment_1)
	{ after(grammarAccess.getFunctionCallExpressionAccess().getFunctionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCallExpression__Group__2__Impl
	rule__FunctionCallExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallExpressionAccess().getArgsAssignment_2()); }
	(rule__FunctionCallExpression__ArgsAssignment_2)*
	{ after(grammarAccess.getFunctionCallExpressionAccess().getArgsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCallExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallExpressionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getFunctionCallExpressionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhileExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileExpression__Group__0__Impl
	rule__WhileExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getWhileExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileExpression__Group__1__Impl
	rule__WhileExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileExpressionAccess().getWhileKeyword_1()); }
	'while'
	{ after(grammarAccess.getWhileExpressionAccess().getWhileKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileExpression__Group__2__Impl
	rule__WhileExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileExpressionAccess().getCondAssignment_2()); }
	(rule__WhileExpression__CondAssignment_2)
	{ after(grammarAccess.getWhileExpressionAccess().getCondAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileExpression__Group__3__Impl
	rule__WhileExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getWhileExpressionAccess().getDoAssignment_3()); }
		(rule__WhileExpression__DoAssignment_3)
		{ after(grammarAccess.getWhileExpressionAccess().getDoAssignment_3()); }
	)
	(
		{ before(grammarAccess.getWhileExpressionAccess().getDoAssignment_3()); }
		(rule__WhileExpression__DoAssignment_3)*
		{ after(grammarAccess.getWhileExpressionAccess().getDoAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileExpressionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getWhileExpressionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MyRacketProgram__DefinesAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getDefinesDefineParserRuleCall_0_2_0()); }
		ruleDefine
		{ after(grammarAccess.getMyRacketProgramAccess().getDefinesDefineParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__ExecutionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getExecutionsExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getMyRacketProgramAccess().getExecutionsExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getDefineAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__ParamsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineAccess().getParamsIDTerminalRuleCall_4_0()); }
		RULE_ID
		{ after(grammarAccess.getDefineAccess().getParamsIDTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__BodyAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineAccess().getBodyExpressionParserRuleCall_6_0()); }
		ruleExpression
		{ after(grammarAccess.getDefineAccess().getBodyExpressionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntExpression__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntExpressionAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntExpressionAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleExpression__IntAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoubleExpressionAccess().getIntINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getDoubleExpressionAccess().getIntINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleExpression__DecAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoubleExpressionAccess().getDecINTTerminalRuleCall_4_0()); }
		RULE_INT
		{ after(grammarAccess.getDoubleExpressionAccess().getDecINTTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FracExpression__NumAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFracExpressionAccess().getNumINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getFracExpressionAccess().getNumINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FracExpression__DecAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFracExpressionAccess().getDecINTTerminalRuleCall_4_0()); }
		RULE_INT
		{ after(grammarAccess.getFracExpressionAccess().getDecINTTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__RealAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompExpressionAccess().getRealINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getCompExpressionAccess().getRealINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__ImagAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompExpressionAccess().getImagINTTerminalRuleCall_4_0()); }
		RULE_INT
		{ after(grammarAccess.getCompExpressionAccess().getImagINTTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConstant__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolConstantAccess().getValueTKeyword_0_0()); }
		(
			{ before(grammarAccess.getBoolConstantAccess().getValueTKeyword_0_0()); }
			'#t'
			{ after(grammarAccess.getBoolConstantAccess().getValueTKeyword_0_0()); }
		)
		{ after(grammarAccess.getBoolConstantAccess().getValueTKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolNumCompExpression__CompAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolNumCompExpressionAccess().getCompAlternatives_1_0()); }
		(rule__BoolNumCompExpression__CompAlternatives_1_0)
		{ after(grammarAccess.getBoolNumCompExpressionAccess().getCompAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolNumCompExpression__E1Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolNumCompExpressionAccess().getE1Alternatives_2_0()); }
		(rule__BoolNumCompExpression__E1Alternatives_2_0)
		{ after(grammarAccess.getBoolNumCompExpressionAccess().getE1Alternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolNumCompExpression__E2Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolNumCompExpressionAccess().getE2Alternatives_3_0()); }
		(rule__BoolNumCompExpression__E2Alternatives_3_0)
		{ after(grammarAccess.getBoolNumCompExpressionAccess().getE2Alternatives_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolCompExpression__E1Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolCompExpressionAccess().getE1ExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getBoolCompExpressionAccess().getE1ExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolCompExpression__E2Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolCompExpressionAccess().getE2ExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getBoolCompExpressionAccess().getE2ExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StrExpression__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStrExpressionAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStrExpressionAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListExpression__ArgsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListExpressionAccess().getArgsExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getListExpressionAccess().getArgsExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintExpression__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintExpressionAccess().getExprExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getPrintExpressionAccess().getExprExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CarExpression__ListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCarExpressionAccess().getListAlternatives_2_0()); }
		(rule__CarExpression__ListAlternatives_2_0)
		{ after(grammarAccess.getCarExpressionAccess().getListAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CdrExpression__ListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCdrExpressionAccess().getListAlternatives_2_0()); }
		(rule__CdrExpression__ListAlternatives_2_0)
		{ after(grammarAccess.getCdrExpressionAccess().getListAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthExpression__ListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLengthExpressionAccess().getListAlternatives_2_0()); }
		(rule__LengthExpression__ListAlternatives_2_0)
		{ after(grammarAccess.getLengthExpressionAccess().getListAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyExpression__ListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEmptyExpressionAccess().getListAlternatives_2_0()); }
		(rule__EmptyExpression__ListAlternatives_2_0)
		{ after(grammarAccess.getEmptyExpressionAccess().getListAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsExpression__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConsExpressionAccess().getExprExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getConsExpressionAccess().getExprExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsExpression__ListAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConsExpressionAccess().getListListExpressionParserRuleCall_3_0()); }
		ruleListExpression
		{ after(grammarAccess.getConsExpressionAccess().getListListExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StrLenExpression__StrAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStrLenExpressionAccess().getStrStrExpressionParserRuleCall_2_0()); }
		ruleStrExpression
		{ after(grammarAccess.getStrLenExpressionAccess().getStrStrExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StrAppExpression__Str1Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStrAppExpressionAccess().getStr1Alternatives_2_0()); }
		(rule__StrAppExpression__Str1Alternatives_2_0)
		{ after(grammarAccess.getStrAppExpressionAccess().getStr1Alternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StrAppExpression__Str2Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStrAppExpressionAccess().getStr2Alternatives_3_0()); }
		(rule__StrAppExpression__Str2Alternatives_3_0)
		{ after(grammarAccess.getStrAppExpressionAccess().getStr2Alternatives_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamCallExpression__ParamAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamCallExpressionAccess().getParamIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getParamCallExpressionAccess().getParamIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__OpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithExpressionAccess().getOpAlternatives_1_0()); }
		(rule__ArithExpression__OpAlternatives_1_0)
		{ after(grammarAccess.getArithExpressionAccess().getOpAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Arg1Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithExpressionAccess().getArg1Alternatives_2_0()); }
		(rule__ArithExpression__Arg1Alternatives_2_0)
		{ after(grammarAccess.getArithExpressionAccess().getArg1Alternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__OargsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithExpressionAccess().getOargsAlternatives_3_0()); }
		(rule__ArithExpression__OargsAlternatives_3_0)
		{ after(grammarAccess.getArithExpressionAccess().getOargsAlternatives_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__CondAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfExpressionAccess().getCondBoolExpressionParserRuleCall_2_0()); }
		ruleBoolExpression
		{ after(grammarAccess.getIfExpressionAccess().getCondBoolExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ThenAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfExpressionAccess().getThenExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getIfExpressionAccess().getThenExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ElseAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfExpressionAccess().getElseExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getIfExpressionAccess().getElseExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallExpression__FunctionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallExpressionAccess().getFunctionDefineCrossReference_1_0()); }
		(
			{ before(grammarAccess.getFunctionCallExpressionAccess().getFunctionDefineIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFunctionCallExpressionAccess().getFunctionDefineIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getFunctionCallExpressionAccess().getFunctionDefineCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallExpression__ArgsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallExpressionAccess().getArgsExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionCallExpressionAccess().getArgsExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__CondAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileExpressionAccess().getCondBoolExpressionParserRuleCall_2_0()); }
		ruleBoolExpression
		{ after(grammarAccess.getWhileExpressionAccess().getCondBoolExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__DoAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileExpressionAccess().getDoExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getWhileExpressionAccess().getDoExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
